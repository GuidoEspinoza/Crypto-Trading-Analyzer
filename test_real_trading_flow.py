#!/usr/bin/env python3
"""
Script de prueba para verificar el flujo completo de trading real con Capital.com
"""

import os
import sys
import asyncio
from datetime import datetime
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.trading_bot import TradingBot
from src.core.capital_client import create_capital_client_from_env
from src.config.main_config import GLOBAL_SYMBOLS

def test_capital_connection():
    """Prueba la conexi√≥n con Capital.com"""
    print("üîó Probando conexi√≥n con Capital.com...")
    
    try:
        # Verificar variables de entorno primero
        required_vars = ['X-CAP-API-KEY', 'identifier', 'password']
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
            return False
        
        print("‚úÖ Variables de entorno configuradas correctamente")
        
        client = create_capital_client_from_env()
        if client is None:
            print("‚ùå Error: No se pudo crear el cliente de Capital.com")
            return False
            
        print("‚úÖ Cliente de Capital.com creado")
        
        # Probar crear sesi√≥n primero
        print("üîê Creando sesi√≥n...")
        session_result = client.create_session()
        if not session_result.get("success"):
            print(f"‚ùå Error al crear sesi√≥n: {session_result.get('error')}")
            return False
            
        print("‚úÖ Sesi√≥n creada exitosamente")
        
        # Probar obtener balance
        print("üí∞ Obteniendo balance...")
        balance_result = client.get_available_balance()
        if balance_result and 'available' in balance_result:
            balance = balance_result.get("available", 0)
            print(f"‚úÖ Conexi√≥n exitosa. Balance disponible: ${balance:.2f}")
            return True
        else:
            print(f"‚ùå Error al obtener balance: {balance_result}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_bot_initialization():
    """Prueba la inicializaci√≥n del bot con trading real"""
    print("\nü§ñ Probando inicializaci√≥n del bot...")
    
    try:
        # Temporalmente habilitar trading real para la prueba
        original_value = os.getenv('ENABLE_REAL_TRADING')
        os.environ['ENABLE_REAL_TRADING'] = 'true'
        
        bot = TradingBot(analysis_interval_minutes=1)
        
        print(f"‚úÖ Bot inicializado correctamente")
        print(f"   - Trading real habilitado: {bot.enable_real_trading}")
        print(f"   - Cliente Capital.com: {'‚úÖ' if bot.capital_client else '‚ùå'}")
        print(f"   - S√≠mbolos configurados: {len(GLOBAL_SYMBOLS)}")
        
        # Restaurar valor original
        if original_value:
            os.environ['ENABLE_REAL_TRADING'] = original_value
        else:
            os.environ.pop('ENABLE_REAL_TRADING', None)
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error al inicializar bot: {str(e)}")
        return False

def test_signal_generation():
    """Prueba la generaci√≥n de se√±ales"""
    print("\nüìä Probando generaci√≥n de se√±ales...")
    
    try:
        bot = TradingBot(analysis_interval_minutes=1)
        
        # Analizar un s√≠mbolo espec√≠fico
        test_symbol = "BTCUSD"
        print(f"   Analizando {test_symbol}...")
        
        # Ejecutar an√°lisis
        signals = bot._analyze_symbols_sequential()
        
        if signals:
            print(f"‚úÖ Se generaron {len(signals)} se√±ales:")
            for signal in signals[:3]:  # Mostrar solo las primeras 3
                confidence = getattr(signal, 'confidence_score', 0)
                print(f"   - {signal.symbol}: {signal.signal_type} (confianza: {confidence:.2f})")
                if hasattr(signal, 'stop_loss_price') and signal.stop_loss_price:
                    print(f"     SL: ${signal.stop_loss_price:.4f}")
                if hasattr(signal, 'take_profit_price') and signal.take_profit_price:
                    print(f"     TP: ${signal.take_profit_price:.4f}")
        else:
            print("‚ö†Ô∏è No se generaron se√±ales en este momento")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error al generar se√±ales: {str(e)}")
        return False

def show_current_config():
    """Muestra la configuraci√≥n actual"""
    print("\n‚öôÔ∏è Configuraci√≥n actual:")
    print(f"   - IS_DEMO: {os.getenv('IS_DEMO', 'True')}")
    print(f"   - ENABLE_REAL_TRADING: {os.getenv('ENABLE_REAL_TRADING', 'False')}")
    print(f"   - CAPITAL_LIVE_URL: {os.getenv('CAPITAL_LIVE_URL', 'No configurado')}")
    print(f"   - CAPITAL_DEMO_URL: {os.getenv('CAPITAL_DEMO_URL', 'No configurado')}")
    print(f"   - X-CAP-API-KEY: {'‚úÖ Configurado' if os.getenv('X-CAP-API-KEY') else '‚ùå No configurado'}")

def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ Iniciando pruebas del flujo de trading real")
    print("=" * 50)
    
    # Mostrar configuraci√≥n
    show_current_config()
    
    # Ejecutar pruebas
    tests = [
        ("Conexi√≥n Capital.com", test_capital_connection),
        ("Inicializaci√≥n del Bot", test_bot_initialization),
        ("Generaci√≥n de Se√±ales", test_signal_generation),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {str(e)}")
            results.append((test_name, False))
    
    # Resumen
    print("\n" + "=" * 50)
    print("üìã RESUMEN DE PRUEBAS:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{len(results)} pruebas pasaron")
    
    if passed == len(results):
        print("\nüéâ ¬°Todas las pruebas pasaron! El sistema est√° listo para trading real.")
        print("\nüìù Para habilitar trading real:")
        print("   1. Cambiar ENABLE_REAL_TRADING=True en .env")
        print("   2. Verificar que IS_DEMO est√© configurado correctamente")
        print("   3. Ejecutar el bot normalmente")
    else:
        print("\n‚ö†Ô∏è Algunas pruebas fallaron. Revisar la configuraci√≥n antes de continuar.")

if __name__ == "__main__":
    main()