# Crypto Trading Analyzer - Docker Compose de Producción
# Versión: 2.0.0
# Orquestación completa del sistema de trading

version: '3.8'

services:
  # === SERVICIO PRINCIPAL DE TRADING ===
  trading-bot:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: crypto-trading-bot
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - TZ=UTC
      - LOG_LEVEL=INFO
      - TESTNET=true
    env_file:
      - .env
    volumes:
      - trading_data:/app/data
      - trading_logs:/app/logs
      - trading_config:/app/config
      - ./src/config/.env.example:/app/config/.env.example:ro
    ports:
      - "8080:8080"  # API principal
      - "8081:8081"  # Monitor web
    networks:
      - trading_network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # === BASE DE DATOS POSTGRESQL ===
  postgres:
    image: postgres:15-alpine
    container_name: crypto-trading-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # === REDIS PARA CACHE Y COLAS ===
  redis:
    image: redis:7-alpine
    container_name: crypto-trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # === MONITOR WEB DASHBOARD ===
  web-monitor:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: crypto-trading-monitor
    restart: unless-stopped
    command: ["python", "src/monitoring/web_dashboard.py"]
    environment:
      - PYTHONPATH=/app/src
      - MONITOR_MODE=web
    env_file:
      - .env
    volumes:
      - trading_logs:/app/logs:ro
      - trading_data:/app/data:ro
    ports:
      - "8082:8082"
    networks:
      - trading_network
    depends_on:
      - trading-bot
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # === PROMETHEUS PARA MÉTRICAS ===
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-trading-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # === GRAFANA PARA VISUALIZACIÓN ===
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-trading-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - trading_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # === NGINX REVERSE PROXY ===
  nginx:
    image: nginx:alpine
    container_name: crypto-trading-nginx
    restart: unless-stopped
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading_network
    depends_on:
      - trading-bot
      - web-monitor
      - grafana
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# === VOLÚMENES PERSISTENTES ===
volumes:
  trading_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  trading_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  trading_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config
  
  postgres_data:
    driver: local
  
  redis_data:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local

# === REDES ===
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# === CONFIGURACIÓN ADICIONAL ===
# Para usar en producción:
# 1. Copiar .env.example a .env y configurar variables
# 2. Generar certificados SSL en deployment/ssl/
# 3. Ejecutar: docker-compose up -d
# 4. Monitorear: docker-compose logs -f
# 5. Escalar: docker-compose up -d --scale trading-bot=2