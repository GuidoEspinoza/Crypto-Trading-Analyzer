#!/usr/bin/env python3
"""
üöÄ Live Trading Bot - Simulador de Trading en Tiempo Real
Bot de trading que muestra logs simples en consola
"""

import asyncio
import os
import sys
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from colorama import Fore, Back, Style, init

# Inicializar colorama para colores en terminal
init(autoreset=True)

# Agregar el directorio backend al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from trading_engine.trading_bot import TradingBot
from trading_engine.paper_trader import PaperTrader
from trading_engine.enhanced_risk_manager import EnhancedRiskManager
from trading_engine.config import TradingBotConfig
from database.database import db_manager

# Configurar logging con colores
class ColoredFormatter(logging.Formatter):
    """Formatter personalizado para agregar colores a los logs"""
    
    COLORS = {
        'DEBUG': Fore.CYAN,
        'INFO': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.MAGENTA + Style.BRIGHT
    }
    
    def format(self, record):
        # Aplicar color seg√∫n el nivel
        color = self.COLORS.get(record.levelname, '')
        record.levelname = f"{color}{record.levelname}{Style.RESET_ALL}"
        
        # Colorear mensajes espec√≠ficos
        message = record.getMessage()
        
        # Colores para diferentes tipos de procesos
        if "üìä Analizando" in message:
            message = f"{Fore.CYAN + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üîÑ INICIANDO CICLO" in message:
            message = f"{Fore.BLUE + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üí∞" in message and "Precio actual" in message:
            message = f"{Fore.YELLOW + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üìà" in message and "RSI" in message:
            message = f"{Fore.MAGENTA}{message}{Style.RESET_ALL}"
        elif "üéØ DECISI√ìN FINAL" in message:
            message = f"{Fore.GREEN + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "‚úÖ TRADE EJECUTADO" in message:
            message = f"{Fore.GREEN + Back.BLACK + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üìã CONFIGURACI√ìN DE ESTRATEGIAS" in message:
            message = f"{Fore.CYAN + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üí∞ CONFIGURACI√ìN DEL PAPER TRADER" in message:
            message = f"{Fore.YELLOW + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "‚öôÔ∏è CONFIGURACI√ìN DEL BOT" in message:
            message = f"{Fore.BLUE + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif message.strip().startswith("üéØ") and ":" in message:
            message = f"{Fore.CYAN}{message}{Style.RESET_ALL}"
        elif message.strip().startswith("‚Ä¢"):
            message = f"{Fore.WHITE + Style.DIM}{message}{Style.RESET_ALL}"
        elif "‚ö†Ô∏è" in message:
            message = f"{Fore.YELLOW}{message}{Style.RESET_ALL}"
        elif "‚ùå" in message:
            message = f"{Fore.RED}{message}{Style.RESET_ALL}"
        elif "üöÄ" in message:
            message = f"{Fore.BLUE + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üíº Ejecutando trade" in message:
            message = f"{Fore.CYAN + Style.BRIGHT}{message}{Style.RESET_ALL}"
        elif "üîç Ejecutando estrategia" in message:
            message = f"{Fore.MAGENTA}{message}{Style.RESET_ALL}"
        elif "‚û°Ô∏è" in message:
            message = f"{Fore.BLUE}{message}{Style.RESET_ALL}"
        
        record.msg = message
        return super().format(record)

# Configurar logger con colores (sin duplicaci√≥n)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Limpiar handlers existentes para evitar duplicaci√≥n
logger.handlers.clear()

# Aplicar el formatter con colores
handler = logging.StreamHandler()
handler.setFormatter(ColoredFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

# Evitar que los logs se propaguen al logger ra√≠z
logger.propagate = False

class LiveTradingBot:
    """
    üöÄ Bot de trading en vivo con logs simples
    """
    
    def __init__(self):
        self.config = TradingBotConfig()
        self.trading_bot = TradingBot()
        self.paper_trader = PaperTrader()
        self.risk_manager = EnhancedRiskManager()
        
        # Configuraci√≥n del bot
        self.symbols = TradingBotConfig.SYMBOLS_LIVE_BOT
        self.update_interval = 30  # segundos
        self.running = False
        
        # Inicializar estrategias del trading bot
        logger.info("üîß Inicializando estrategias de trading...")
        try:
            # Forzar inicializaci√≥n de estrategias
            self.trading_bot._initialize_strategies()
            logger.info(f"‚úÖ {len(self.trading_bot.strategies)} estrategias inicializadas")
            
            # Mostrar informaci√≥n detallada de cada estrategia
            logger.info("üìã CONFIGURACI√ìN DE ESTRATEGIAS:")
            for strategy_name, strategy in self.trading_bot.strategies.items():
                logger.info(f"   üéØ {strategy_name}:")
                logger.info(f"      ‚Ä¢ Confianza m√≠nima: {strategy.min_confidence}%")
                if hasattr(strategy, 'rsi_oversold'):
                    logger.info(f"      ‚Ä¢ RSI Sobreventa: {strategy.rsi_oversold}")
                if hasattr(strategy, 'rsi_overbought'):
                    logger.info(f"      ‚Ä¢ RSI Sobrecompra: {strategy.rsi_overbought}")
                if hasattr(strategy, 'stop_loss_pct'):
                    logger.info(f"      ‚Ä¢ Stop Loss: {strategy.stop_loss_pct}%")
                if hasattr(strategy, 'take_profit_pct'):
                    logger.info(f"      ‚Ä¢ Take Profit: {strategy.take_profit_pct}%")
            
            # Mostrar configuraci√≥n del Paper Trader
            logger.info("üí∞ CONFIGURACI√ìN DEL PAPER TRADER:")
            logger.info(f"   ‚Ä¢ Balance inicial: ${self.paper_trader.initial_balance:,.2f}")
            logger.info(f"   ‚Ä¢ Tama√±o m√°ximo por posici√≥n: {self.paper_trader.max_position_size:.1f}%")
            logger.info(f"   ‚Ä¢ Exposici√≥n m√°xima total: {self.paper_trader.max_total_exposure:.1f}%")
            logger.info(f"   ‚Ä¢ Valor m√≠nimo por trade: ${self.paper_trader.min_trade_value}")
            
            # Mostrar configuraci√≥n del bot
            logger.info("‚öôÔ∏è CONFIGURACI√ìN DEL BOT:")
            logger.info(f"   ‚Ä¢ S√≠mbolos: {', '.join(self.symbols)}")
            logger.info(f"   ‚Ä¢ Intervalo de an√°lisis: {self.update_interval} segundos")
            logger.info(f"   ‚Ä¢ Confianza m√≠nima para trades: {self.config.MIN_CONFIDENCE_THRESHOLD}%")
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando estrategias: {e}")
        
        self.last_signals = {}
        self.session_stats = {
            "start_time": datetime.now(),
            "total_trades": 0,
            "successful_trades": 0,
            "total_pnl": 0.0
        }
    

    
    async def analyze_and_trade(self):
        """üîç Analizar mercado y ejecutar trades"""
        try:
            logger.info(f"üîÑ INICIANDO CICLO DE AN√ÅLISIS - {datetime.now().strftime('%H:%M:%S')}")
            
            for symbol in self.symbols:
                logger.info(f"üìä Analizando {symbol}...")
                
                # Obtener precio actual
                try:
                    import ccxt
                    exchange = ccxt.binance({'sandbox': False, 'enableRateLimit': True})
                    ticker = exchange.fetch_ticker(symbol)
                    current_price = ticker['last']
                    logger.info(f"üí∞ {symbol} - Precio actual: ${current_price:,.2f}")
                except Exception as e:
                    logger.error(f"‚ùå Error obteniendo precio para {symbol}: {e}")
                    current_price = 0
                
                # Analizar con cada estrategia del trading bot
                best_signal = None
                best_confidence = 0
                
                for strategy_name, strategy in self.trading_bot.strategies.items():
                    try:
                        logger.info(f"üîç Ejecutando estrategia {strategy_name} para {symbol}")
                        
                        # Obtener datos de mercado para mostrar indicadores
                        try:
                            df = strategy.get_market_data(symbol, "1h", 50)
                            if not df.empty:
                                last_close = df['close'].iloc[-1]
                                volume_avg = df['volume'].rolling(20).mean().iloc[-1]
                                current_volume = df['volume'].iloc[-1]
                                
                                # Calcular algunos indicadores b√°sicos
                                import pandas_ta as ta
                                rsi = ta.rsi(df['close'], length=14).iloc[-1]
                                sma_20 = ta.sma(df['close'], length=20).iloc[-1]
                                sma_50 = ta.sma(df['close'], length=50).iloc[-1]
                                
                                logger.info(f"üìà {symbol} - RSI: {rsi:.1f}, SMA20: ${sma_20:.2f}, SMA50: ${sma_50:.2f}")
                                logger.info(f"üìä {symbol} - Volumen: {current_volume:,.0f} (Promedio: {volume_avg:,.0f})")
                                
                        except Exception as e:
                            logger.error(f"‚ùå Error obteniendo indicadores para {symbol}: {e}")
                        
                        # Ejecutar an√°lisis de la estrategia
                        signal = strategy.analyze(symbol)
                        
                        logger.info(f"‚û°Ô∏è {strategy_name} - {symbol}: {signal.signal_type} (Confianza: {signal.confidence_score:.1f}%)")
                        
                        # Seleccionar la se√±al con mayor confianza
                        if signal.confidence_score > best_confidence:
                            best_signal = signal
                            best_confidence = signal.confidence_score
                            
                    except Exception as e:
                        logger.error(f"‚ùå Error en estrategia {strategy_name} para {symbol}: {e}")
                
                # Decisi√≥n final
                if best_signal:
                    logger.info(f"üéØ DECISI√ìN FINAL para {symbol}: {best_signal.signal_type} con {best_confidence:.1f}% de confianza")
                    
                    self.last_signals[symbol] = {
                        'signal': best_signal,
                        'timestamp': datetime.now(),
                        'action': 'PENDING'
                    }
                    
                    # Ejecutar trade si la se√±al es v√°lida y tiene suficiente confianza
                    if best_signal.signal_type in ['BUY', 'SELL'] and best_signal.confidence_score >= 65.0:
                        logger.info(f"üíº Ejecutando trade {best_signal.signal_type} para {symbol}...")
                        trade_result = self.paper_trader.execute_signal(best_signal)
                        
                        if trade_result.success:
                            self.last_signals[symbol]['action'] = 'EXECUTED'
                            self.session_stats['total_trades'] += 1
                            if trade_result.trade_id:
                                self.session_stats['successful_trades'] += 1
                            logger.info(f"‚úÖ TRADE EJECUTADO: {symbol} - Cantidad: {trade_result.quantity:.6f}, Valor: ${trade_result.entry_value:,.2f}")
                        else:
                            self.last_signals[symbol]['action'] = 'REJECTED'
                            logger.warning(f"‚ö†Ô∏è TRADE RECHAZADO para {symbol}: {trade_result.message}")
                    elif best_signal.signal_type in ['BUY', 'SELL']:
                        logger.warning(f"‚ö†Ô∏è {symbol}: Se√±al {best_signal.signal_type} con confianza insuficiente ({best_confidence:.1f}% < 65%)")
                        self.last_signals[symbol]['action'] = 'LOW_CONFIDENCE'
                    else:
                        logger.info(f"‚è∏Ô∏è {symbol}: MANTENER POSICI√ìN (HOLD)")
                        self.last_signals[symbol]['action'] = 'HOLD'
                else:
                    logger.error(f"‚ùå No se pudo generar se√±al para {symbol}")
                

                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en an√°lisis: {e}")
            import traceback
            traceback.print_exc()
    
    async def start(self):
        """üöÄ Iniciar el bot de trading en vivo"""
        self.running = True
        logger.info("üöÄ Iniciando Live Trading Bot...")
        logger.info("‚ö†Ô∏è Modo: Paper Trading (Sin dinero real)")
        logger.info("Presiona Ctrl+C para detener")
        
        # Contador de ciclos para debug
        cycle_count = 0
        
        try:
            while self.running:
                cycle_count += 1
                logger.info(f"üîÑ Ciclo #{cycle_count} - {datetime.now().strftime('%H:%M:%S')}")
                
                # Analizar mercado y ejecutar trades
                await self.analyze_and_trade()
                
                # Mostrar estad√≠sticas actuales
                self.show_current_stats()
                
                logger.info(f"‚è±Ô∏è Esperando {self.update_interval} segundos antes del pr√≥ximo an√°lisis...")
                
                # Esperar antes del siguiente ciclo
                await asyncio.sleep(self.update_interval)
                    
        except KeyboardInterrupt:
            logger.info("üõë Bot detenido por el usuario")
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self.running = False
            # Mostrar resumen final
            self.show_final_summary()
    
    def show_current_stats(self):
        """üìä Mostrar estad√≠sticas actuales"""
        try:
            portfolio = self.paper_trader._get_portfolio_summary()
            total_value = portfolio.get('total_value', 0)
            total_pnl = portfolio.get('total_unrealized_pnl', 0)
            
            logger.info(f"üí∞ Balance actual: ${total_value:,.2f}")
            logger.info(f"üìà P&L Total: ${total_pnl:.2f}")
            logger.info(f"üéØ Trades ejecutados: {self.session_stats['total_trades']}")
        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas: {e}")
    
    def show_final_summary(self):
        """üìã Mostrar resumen final de la sesi√≥n"""
        logger.info("="*60)
        logger.info("üìã RESUMEN FINAL DE LA SESI√ìN")
        logger.info("="*60)
        
        try:
            portfolio = self.paper_trader._get_portfolio_summary()
            session_duration = datetime.now() - self.session_stats['start_time']
            
            logger.info(f"‚è±Ô∏è Duraci√≥n: {str(session_duration).split('.')[0]}")
            logger.info(f"üí∞ Balance Final: ${portfolio.get('total_value', 0):,.2f}")
            logger.info(f"üìà P&L Total: ${portfolio.get('total_unrealized_pnl', 0):.2f}")
            logger.info(f"üéØ Trades Ejecutados: {self.session_stats['total_trades']}")
            logger.info(f"‚úÖ Trades Exitosos: {self.session_stats['successful_trades']}")
            
            success_rate = (self.session_stats['successful_trades'] / max(self.session_stats['total_trades'], 1)) * 100
            logger.info(f"üìä Tasa de √âxito: {success_rate:.1f}%")
            
            logger.info("¬°Gracias por usar Live Trading Bot! üöÄ")
        except Exception as e:
            logger.error(f"Error generando resumen final: {e}")

async def main():
    """üéØ Funci√≥n principal"""
    try:
        bot = LiveTradingBot()
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë Bot detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en main: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass  # Ya manejado en main()