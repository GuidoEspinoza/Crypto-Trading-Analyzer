"""
ü§ñ Universal Trading Analyzer - Trading Bot
Bot principal que ejecuta estrategias autom√°ticamente 24/7
"""

import asyncio
import logging
import os
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass
import threading
import json
import queue
from functools import lru_cache
import hashlib
from concurrent.futures import ThreadPoolExecutor
import weakref

# Importar todos nuestros componentes
from src.config.main_config import TradingBotConfig, TradingProfiles, APIConfig
from .enhanced_strategies import TradingSignal, ProfessionalRSIStrategy, MultiTimeframeStrategy, EnsembleStrategy
from .paper_trader import PaperTrader, TradeResult
from .enhanced_risk_manager import EnhancedRiskManager, EnhancedRiskAssessment
from .position_monitor import PositionMonitor
from .position_adjuster import PositionAdjuster
from database.database import db_manager
from database.models import Strategy as DBStrategy

# Configurar logging ANTES de la clase
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class BotStatus:
    """
    üìä Estado del trading bot
    """
    is_running: bool
    uptime: str
    total_signals_generated: int
    total_trades_executed: int
    successful_trades: int
    current_portfolio_value: float
    total_pnl: float
    active_strategies: List[str]
    last_analysis_time: datetime
    next_analysis_time: datetime

class TradingBot:
    """
    ü§ñ Trading Bot Principal con optimizaciones de rendimiento
    
    Caracter√≠sticas:
    - Ejecuta m√∫ltiples estrategias autom√°ticamente
    - An√°lisis cada X minutos (configurable)
    - Risk management integrado
    - Paper trading seguro
    - Logging completo
    - Dashboard en tiempo real
    - Cache inteligente para mejor rendimiento
    - Procesamiento paralelo de estrategias
    """
    
    # Cache compartido entre instancias
    _cache = {}
    _cache_timestamps = {}
    # Cache TTL se obtiene de la configuraci√≥n del perfil
    @classmethod
    def _get_cache_ttl(cls):
        profile_config = TradingProfiles.get_current_profile()
        return profile_config.get('cache_ttl_seconds', 180)
    
    def __init__(self, analysis_interval_minutes: int = None):
        """
        Inicializar Trading Bot Profesional
        
        Args:
            analysis_interval_minutes: Intervalo entre an√°lisis (usa configuraci√≥n centralizada si no se especifica)
        """
        # Configuraci√≥n centralizada del bot
        self.config = TradingBotConfig()
        
        self.analysis_interval = analysis_interval_minutes or self.config.get_analysis_interval()
        self.is_running = False
        self.start_time = None
        
        # Configurar logger PRIMERO
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # Componentes principales
        self.paper_trader = PaperTrader()
        self.risk_manager = EnhancedRiskManager()
        
        # Sistema de monitoreo de posiciones
        self.position_monitor = PositionMonitor(
            price_fetcher=self._get_current_price,
            paper_trader=self.paper_trader
        )
        
        # Sistema de ajuste de posiciones TP/SL
        self.position_adjuster = PositionAdjuster(
            config=None,
            simulation_mode=True
        )
        
        # Sistema de eventos para comunicaci√≥n con LiveTradingBot
        profile_config = TradingProfiles.get_current_profile()
        self.event_queue = queue.Queue(maxsize=profile_config.get('event_queue_maxsize', 1000))
        self.adjustment_thread = None
        self.trade_event_callback = None  # Callback para eventos de trades
        
        # ThreadPool para procesamiento paralelo
        self.executor = ThreadPoolExecutor(max_workers=4, thread_name_prefix="TradingBot")
        
        # Estrategias disponibles (Enhanced)
        self.strategies = {}
        self._initialize_strategies()
        
        # S√≠mbolos a analizar desde configuraci√≥n centralizada
        self.symbols = self.config.SYMBOLS
        
        # Configuraci√≥n de trading profesional desde configuraci√≥n centralizada
        self.min_confidence_threshold = self.config.get_min_confidence_threshold()
        self.max_daily_trades = self.config.get_max_daily_trades()
        self.max_concurrent_positions = self.config.get_max_concurrent_positions()
        self.enable_trading = True  # Activar/desactivar ejecuci√≥n de trades
        
        # Configuraci√≥n de timeframes profesional desde configuraci√≥n centralizada
        self.primary_timeframe = self.config.get_primary_timeframe()
        self.confirmation_timeframe = self.config.get_confirmation_timeframe()
        self.trend_timeframe = self.config.get_trend_timeframe()
        
        # Estad√≠sticas
        self.stats = {
            "signals_generated": 0,
            "trades_executed": 0,
            "successful_trades": 0,
            "total_pnl": 0.0,
            "daily_trades": 0,
            "last_reset_date": datetime.now().date()
        }
        
        # Circuit breaker avanzado
        self.consecutive_losses = 0
        self.circuit_breaker_active = False
        self.circuit_breaker_activated_at = None
        self.max_consecutive_losses = self.config.get_max_consecutive_losses()
        self.circuit_breaker_cooldown_hours = self.config.get_circuit_breaker_cooldown_hours()
        
        # Nuevas funcionalidades del circuit breaker
        self.max_drawdown_threshold = self.config.get_max_drawdown_threshold() / 100.0  # Convertir porcentaje a decimal
        self.current_drawdown = 0.0
        self.peak_portfolio_value = 0.0
        self.gradual_reactivation_enabled = True
        self.reactivation_phase = 0  # 0: inactivo, 1-3: fases de reactivaci√≥n
        self.reactivation_trades_allowed = 0
        self.reactivation_success_count = 0
        self.circuit_breaker_trigger_reason = ""
        
        # Thread para ejecuci√≥n
        self.analysis_thread = None
        self.stop_event = threading.Event()
        
        self.logger.info("ü§ñ Trading Bot initialized with Position Monitor")
    
    def set_trade_event_callback(self, callback):
        """
        üîó Configurar callback para eventos de trades
        
        Args:
            callback: Funci√≥n que ser√° llamada cuando se ejecute un trade
        """
        self.trade_event_callback = callback
        self.logger.info("‚úÖ Trade event callback configured")
    
    def _emit_trade_event(self, signal, trade_result, risk_assessment):
        """
        üì° Emitir evento de trade ejecutado
        
        Args:
            signal: Se√±al de trading que gener√≥ el trade
            trade_result: Resultado de la ejecuci√≥n del trade
            risk_assessment: Evaluaci√≥n de riesgo del trade
        """
        try:
            if self.trade_event_callback:
                trade_event = {
                    'type': 'TRADE_EXECUTED',
                    'timestamp': datetime.now(),
                    'symbol': signal.symbol,
                    'signal_type': signal.signal_type,
                    'confidence': signal.confidence_score,
                    'entry_price': trade_result.entry_price,
                    'quantity': trade_result.quantity,
                    'trade_value': trade_result.entry_value,
                    'success': trade_result.success,
                    'message': trade_result.message,
                    'risk_score': risk_assessment.overall_risk_score,
                    'risk_level': risk_assessment.risk_level.value,
                    'position_size': risk_assessment.position_sizing.recommended_size,
                    'stop_loss': getattr(trade_result, 'stop_loss_price', None),
                    'take_profit': getattr(trade_result, 'take_profit_price', None)
                }
                
                # Llamar al callback
                self.trade_event_callback(trade_event)
                
                # Tambi√©n agregar al queue para compatibilidad
                if not self.event_queue.full():
                    self.event_queue.put(trade_event)
                    
        except Exception as e:
            self.logger.error(f"‚ùå Error emitting trade event: {e}")
    
    def _initialize_strategies(self):
        """üîß Inicializar estrategias de trading"""
        try:
            self.strategies = {
                "ProfessionalRSI": ProfessionalRSIStrategy(),
                "MultiTimeframe": MultiTimeframeStrategy(),
                "Ensemble": EnsembleStrategy()
            }
            self.logger.info(f"‚úÖ {len(self.strategies)} strategies initialized")
        except Exception as e:
            self.logger.error(f"‚ùå Error initializing strategies: {e}")
            self.strategies = {}
    
    @classmethod
    def _get_cache_key(cls, method_name: str, *args, **kwargs) -> str:
        """Generar clave de cache √∫nica para m√©todo y par√°metros"""
        try:
            key_data = f"{method_name}_{str(args)}_{str(sorted(kwargs.items()))}"
            return hashlib.md5(key_data.encode()).hexdigest()
        except Exception:
            return f"{method_name}_{time.time()}"
    
    @classmethod
    def _get_from_cache(cls, cache_key: str):
        """Obtener valor del cache si es v√°lido"""
        current_time = time.time()
        if (cache_key in cls._cache and 
            cache_key in cls._cache_timestamps and
            current_time - cls._cache_timestamps[cache_key] < cls._get_cache_ttl()):
            return cls._cache[cache_key]
        return None
    
    @classmethod
    def _store_in_cache(cls, cache_key: str, value):
        """Almacenar valor en cache con timestamp"""
        cls._cache[cache_key] = value
        cls._cache_timestamps[cache_key] = time.time()
        
        # Limpiar cache viejo si es necesario
        if len(cls._cache) > 500:  # L√≠mite de entradas
            cls._cleanup_cache()
    
    @classmethod
    def _cleanup_cache(cls):
        """Limpiar entradas viejas del cache"""
        current_time = time.time()
        expired_keys = [
            key for key, timestamp in cls._cache_timestamps.items()
            if current_time - timestamp >= cls._get_cache_ttl()
        ]
        for key in expired_keys:
            cls._cache.pop(key, None)
            cls._cache_timestamps.pop(key, None)
        
    def start(self):
        """
        üöÄ Iniciar el trading bot
        """
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è Bot is already running")
            return
        
        self.is_running = True
        self.start_time = datetime.now()
        self.stop_event.clear()
        
        # Configurar schedule para an√°lisis peri√≥dico
        schedule.clear()
        schedule.every(self.analysis_interval).minutes.do(self._run_analysis_cycle)
        
        # Iniciar thread de ejecuci√≥n (sin an√°lisis inicial inmediato)
        self.analysis_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.analysis_thread.start()
        
        # Iniciar monitoreo de posiciones
        self.position_monitor.start_monitoring()
        
        # Iniciar sistema de ajuste de posiciones TP/SL
        self._start_position_adjustment_monitoring()
        
        # Programar primer an√°lisis para evitar bloqueo
        schedule.every(self.config.get_first_analysis_delay()).seconds.do(self._run_first_analysis).tag('first_analysis')
        
        self.logger.info(f"üöÄ Trading Bot started - Analysis every {self.analysis_interval} minutes")
        self.logger.info(f"üìä Monitoring symbols: {', '.join(self.symbols)}")
        self.logger.info(f"üß† Active strategies: {', '.join(self.strategies.keys())}")
        self.logger.info("üîç Position monitoring started")
        self.logger.info("üéØ TP/SL adjustment monitoring started")
    
    def stop(self):
        """
        üõë Detener el trading bot y limpiar recursos
        """
        if not self.is_running:
            self.logger.warning("‚ö†Ô∏è Bot is not running")
            return
        
        self.is_running = False
        self.stop_event.set()
        schedule.clear()
        
        # Detener monitoreo de posiciones
        self.position_monitor.stop_monitoring()
        
        # Detener sistema de ajuste de posiciones
        self.position_adjuster.stop_monitoring()
        
        # Limpiar ThreadPoolExecutor
        if hasattr(self, 'executor') and self.executor:
            profile_config = TradingProfiles.get_current_profile()
            timeout = self.config.get_executor_shutdown_timeout()
            self.executor.shutdown(wait=True, timeout=timeout)
            self.logger.info("üßπ ThreadPoolExecutor cleaned up")
        
        if self.analysis_thread and self.analysis_thread.is_alive():
            profile_config = TradingProfiles.get_current_profile()
            timeout = self.config.get_thread_join_timeout()
            self.analysis_thread.join(timeout=timeout)
            
        if self.adjustment_thread and self.adjustment_thread.is_alive():
            profile_config = TradingProfiles.get_current_profile()
            timeout = self.config.get_thread_join_timeout()
            self.adjustment_thread.join(timeout=timeout)
        
        # Limpiar cache si es necesario
        self._cleanup_cache()
        
        self.logger.info("üõë Trading Bot stopped")
        self.logger.info("üîç Position monitoring stopped")
        self.logger.info("üéØ TP/SL adjustment monitoring stopped")
        self.logger.info("üíæ Cache cleaned up")
    
    def _get_current_price(self, symbol: str) -> float:
        """üí∞ Obtener precio actual del s√≠mbolo con cache para el position monitor"""
        try:
            # Generar clave de cache para precio
            cache_key = self._get_cache_key("current_price", symbol)
            
            # Verificar cache (TTL m√°s corto para precios)
            cached_price = self._get_from_cache(cache_key)
            if cached_price is not None:
                return cached_price
            
            import ccxt
            exchange = ccxt.binance({'sandbox': False, 'enableRateLimit': True})
            ticker = exchange.fetch_ticker(symbol)
            current_price = float(ticker['last']) if ticker['last'] else 0.0
            
            # Almacenar en cache
            if current_price > 0:
                self._store_in_cache(cache_key, current_price)
            
            return current_price
        except Exception as e:
            self.logger.error(f"‚ùå Error getting current price for {symbol}: {e}")
            # Fallback: intentar obtener desde estrategias
            try:
                if self.strategies:
                    strategy = next(iter(self.strategies.values()))
                    df = strategy.get_market_data(symbol, "1m", limit=1)
                    fallback_price = float(df['close'].iloc[-1]) if not df.empty else 0.0
                    
                    # Cache del fallback tambi√©n
                    if fallback_price > 0:
                        cache_key = self._get_cache_key("current_price", symbol)
                        self._store_in_cache(cache_key, fallback_price)
                    
                    return fallback_price
            except:
                pass
            return 0.0
    
    def _run_scheduler(self):
        """
        ‚è∞ Ejecutar scheduler en loop
        """
        while not self.stop_event.is_set():
            try:
                schedule.run_pending()
                time.sleep(APIConfig.SCHEDULER_SLEEP_INTERVAL)
            except Exception as e:
                self.logger.error(f"‚ùå Error in scheduler: {e}")
                time.sleep(APIConfig.ERROR_RECOVERY_SLEEP)
    
    def _run_analysis_cycle(self):
        """
        üîÑ Ejecutar un ciclo completo de an√°lisis con cache y procesamiento paralelo
        """
        try:
            self.logger.info("üîÑ Starting optimized analysis cycle...")
            
            # Resetear contador diario si es necesario
            self._reset_daily_stats_if_needed()
            
            # Verificar si podemos hacer m√°s trades hoy
            if self.stats["daily_trades"] >= self.max_daily_trades:
                self.logger.info(f"‚è∏Ô∏è Daily trade limit reached ({self.max_daily_trades})")
                return
            
            # Generar clave de cache para este ciclo
            cache_key = self._get_cache_key("analysis_cycle", tuple(self.symbols), tuple(self.strategies.keys()))
            
            # Verificar cache
            cached_signals = self._get_from_cache(cache_key)
            if cached_signals is not None:
                self.logger.info("‚ö° Using cached analysis results")
                all_signals = cached_signals
            else:
                # Analizar en paralelo usando ThreadPoolExecutor
                all_signals = self._analyze_symbols_parallel()
                
                # Almacenar en cache
                self._store_in_cache(cache_key, all_signals)
            
            # Procesar se√±ales con trading
            if all_signals:
                self._process_signals(all_signals)
            else:
                self.logger.info("‚ö™ No trading signals generated this cycle")
            
            # Actualizar estad√≠sticas en base de datos
            self._update_strategy_stats()
            
            self.logger.info("‚úÖ Optimized analysis cycle completed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error in analysis cycle: {e}")
    
    def _analyze_symbols_parallel(self) -> List[TradingSignal]:
        """
        üöÄ Analizar s√≠mbolos en paralelo para mejor rendimiento
        """
        all_signals = []
        
        # Crear tareas para el pool de hilos
        tasks = []
        for symbol in self.symbols:
            for strategy_name, strategy in self.strategies.items():
                tasks.append((symbol, strategy_name, strategy))
        
        # Ejecutar an√°lisis en paralelo
        try:
            futures = []
            for symbol, strategy_name, strategy in tasks:
                future = self.executor.submit(self._analyze_single_symbol, symbol, strategy_name, strategy)
                futures.append(future)
            
            # Recopilar resultados
            profile_config = TradingProfiles.get_current_profile()
            timeout = self.config.get_analysis_future_timeout()
            for future in futures:
                try:
                    signal = future.result(timeout=timeout)  # Timeout configurable
                    if signal and signal.signal_type != "HOLD":
                        all_signals.append(signal)
                        self.stats["signals_generated"] += 1
                        self.logger.info(f"üìä Signal: {signal.signal_type} {signal.symbol} ({signal.strategy_name}) - Confidence: {signal.confidence_score}%")
                except Exception as e:
                    self.logger.error(f"‚ùå Error in parallel analysis: {e}")
        
        except Exception as e:
            self.logger.error(f"‚ùå Error in parallel execution: {e}")
            # Fallback a an√°lisis secuencial
            all_signals = self._analyze_symbols_sequential()
        
        return all_signals
    
    def _analyze_single_symbol(self, symbol: str, strategy_name: str, strategy) -> Optional[TradingSignal]:
        """
        üìà Analizar un s√≠mbolo con una estrategia espec√≠fica
        """
        try:
            signal = strategy.analyze(symbol)
            if hasattr(signal, 'strategy_name'):
                signal.strategy_name = strategy_name
            return signal
        except Exception as e:
            self.logger.error(f"‚ùå Error analyzing {symbol} with {strategy_name}: {e}")
            return None
    
    def _analyze_symbols_sequential(self) -> List[TradingSignal]:
        """
        üêå An√°lisis secuencial como fallback
        """
        all_signals = []
        for symbol in self.symbols:
            for strategy_name, strategy in self.strategies.items():
                try:
                    signal = strategy.analyze(symbol)
                    if signal.signal_type != "HOLD":
                        all_signals.append(signal)
                        self.stats["signals_generated"] += 1
                        self.logger.info(f"üìä Signal: {signal.signal_type} {symbol} ({strategy_name}) - Confidence: {signal.confidence_score}%")
                except Exception as e:
                    self.logger.error(f"‚ùå Error analyzing {symbol} with {strategy_name}: {e}")
        return all_signals
    
    def _process_signals(self, signals: List[TradingSignal]):
        """
        üéØ Procesar y ejecutar se√±ales de trading
        
        Args:
            signals: Lista de se√±ales generadas
        """
        # Verificar circuit breaker avanzado
        if not self._check_circuit_breaker():
            self.logger.warning("üö® Circuit breaker active - skipping signal processing")
            return
        
        # Verificar l√≠mites de reactivaci√≥n gradual
        if not self._can_trade_during_reactivation():
            self.logger.info("üü° Reactivation limits reached - skipping signal processing")
            return
        
        # Filtrar se√±ales por confianza m√≠nima
        high_confidence_signals = [
            signal for signal in signals 
            if signal.confidence_score >= self.min_confidence_threshold
        ]
        
        if not high_confidence_signals:
            self.logger.info(f"üìâ No signals above confidence threshold ({self.min_confidence_threshold}%)")
            return
        
        # Ordenar por confianza (mayor primero)
        high_confidence_signals.sort(key=lambda x: x.confidence_score, reverse=True)
        
        # Obtener valor actual del portfolio
        portfolio_summary = db_manager.get_portfolio_summary(is_paper=True)
        portfolio_value = portfolio_summary.get("total_value", self.config.DEFAULT_PORTFOLIO_VALUE)
        
        self.logger.info(f"üíº Current portfolio value: ${portfolio_value:,.2f}")
        
        # Procesar cada se√±al
        for signal in high_confidence_signals:
            try:
                # Verificar l√≠mite diario
                if self.stats["daily_trades"] >= self.max_daily_trades:
                    self.logger.info("‚è∏Ô∏è Daily trade limit reached")
                    break
                
                # An√°lisis de riesgo
                risk_assessment = self.risk_manager.assess_trade_risk(signal, portfolio_value)
                
                self.logger.info(f"üõ°Ô∏è Risk assessment for {signal.symbol}:")
                self.logger.info(f"   - Risk Score: {risk_assessment.overall_risk_score:.1f}/100")
                self.logger.info(f"   - Position Size: {risk_assessment.position_sizing.recommended_size:.2f}")
                self.logger.info(f"   - Approved: {risk_assessment.is_approved}")
                self.logger.info(f"   - Risk Level: {risk_assessment.risk_level.value}")
                
                # Ejecutar si est√° aprobado
                if risk_assessment.is_approved and self.enable_trading:
                    trade_result = self.paper_trader.execute_signal(signal)
                    
                    if trade_result.success:
                        self.stats["trades_executed"] += 1
                        self.stats["daily_trades"] += 1
                        
                        # Determinar si fue exitoso bas√°ndose en el tipo de trade y PnL real
                        trade_was_profitable = False
                        if signal.signal_type == "SELL":
                            # Para ventas, verificar si hay PnL positivo en el mensaje
                            if "PnL:" in trade_result.message and "$" in trade_result.message:
                                try:
                                    # Extraer PnL del mensaje: "PnL: $X.XX"
                                    pnl_part = trade_result.message.split("PnL: $")[1].split(")")[0]
                                    pnl_value = float(pnl_part)
                                    trade_was_profitable = pnl_value > 0
                                except:
                                    trade_was_profitable = False
                        else:
                            # Para compras, solo contar como exitoso si se ejecut√≥ correctamente
                            # El √©xito real se determinar√° cuando se venda
                            trade_was_profitable = trade_result.success
                        
                        if trade_was_profitable:
                            self.stats["successful_trades"] += 1
                        
                        # Actualizar tracking de p√©rdidas consecutivas
                        self._update_consecutive_losses(trade_was_profitable)
                        
                        self.logger.info(f"‚úÖ Trade executed: {trade_result.message}")
                        
                        # Emitir evento de trade ejecutado
                        self._emit_trade_event(signal, trade_result, risk_assessment)
                    else:
                        # Trade fall√≥ en ejecuci√≥n - no contar como p√©rdida consecutiva
                        self.logger.warning(f"‚ùå Trade failed: {trade_result.message}")
                
                elif not risk_assessment.is_approved:
                    rejection_reason = f"Risk level: {risk_assessment.risk_level.value}"
                    self.logger.info(f"üö´ Trade rejected: {rejection_reason}")
                    
                    # Mostrar recomendaciones
                    for rec in risk_assessment.recommendations:
                        self.logger.info(f"   üí° {rec}")
                
            except Exception as e:
                self.logger.error(f"‚ùå Error processing signal {signal.symbol}: {e}")
        
        # Actualizar P&L total
        self.stats["total_pnl"] = portfolio_summary.get("total_pnl", 0)
        
        # Emitir evento de an√°lisis completado
        self._emit_analysis_event(len(high_confidence_signals), self.stats["daily_trades"])
    
    def _reset_daily_stats_if_needed(self):
        """
        üìÖ Resetear estad√≠sticas diarias si es un nuevo d√≠a
        """
        today = datetime.now().date()
        if today != self.stats["last_reset_date"]:
            self.stats["daily_trades"] = 0
            self.stats["last_reset_date"] = today
            # Resetear circuit breaker al inicio de un nuevo d√≠a
            self.consecutive_losses = 0
            self.circuit_breaker_active = False
            self.circuit_breaker_activated_at = None
            self.logger.info(f"üìÖ Daily stats reset for {today} - Circuit breaker reset")
    
    def _check_circuit_breaker(self) -> bool:
        """
        üö® Verificar estado del circuit breaker avanzado
        
        Returns:
            bool: True si el trading est√° permitido, False si est√° bloqueado
        """
        # Verificar drawdown antes que p√©rdidas consecutivas
        self._check_drawdown_circuit_breaker()
        
        # Si no est√° activo, permitir trading
        if not self.circuit_breaker_active:
            return True
        
        # Verificar si ha pasado el tiempo de cooldown
        if self.circuit_breaker_activated_at:
            time_since_activation = datetime.now() - self.circuit_breaker_activated_at
            cooldown_duration = timedelta(hours=self.circuit_breaker_cooldown_hours)
            
            if time_since_activation >= cooldown_duration:
                # Reactivaci√≥n gradual
                if self.gradual_reactivation_enabled:
                    self._initiate_gradual_reactivation()
                else:
                    # Desactivar circuit breaker despu√©s del cooldown
                    self.circuit_breaker_active = False
                    self.circuit_breaker_activated_at = None
                    self.consecutive_losses = 0
                    self.logger.info(f"üü¢ Circuit breaker deactivated after {self.circuit_breaker_cooldown_hours}h cooldown")
                return True
            else:
                remaining_time = cooldown_duration - time_since_activation
                remaining_hours = remaining_time.total_seconds() / 3600
                self.logger.info(f"üî¥ Circuit breaker active - {remaining_hours:.1f}h remaining")
                return False
        
        return False
    
    def _update_consecutive_losses(self, trade_was_profitable: bool):
        """
        üìä Actualizar contador de p√©rdidas consecutivas y reactivaci√≥n gradual
        
        Args:
            trade_was_profitable: True si el trade fue rentable, False si fue p√©rdida
        """
        if trade_was_profitable:
            # Resetear contador si el trade fue rentable
            self.consecutive_losses = 0
            self.logger.info(f"‚úÖ Profitable trade - consecutive losses reset to 0")
            
            # Actualizar progreso de reactivaci√≥n gradual
            self._update_reactivation_success(True)
            
        else:
            # Incrementar contador de p√©rdidas
            self.consecutive_losses += 1
            self.logger.warning(f"‚ùå Loss #{self.consecutive_losses}/{self.max_consecutive_losses}")
            
            # Actualizar progreso de reactivaci√≥n gradual (p√©rdida)
            self._update_reactivation_success(False)
            
            # Activar circuit breaker si se alcanza el l√≠mite
            if self.consecutive_losses >= self.max_consecutive_losses and not self.circuit_breaker_active:
                self.circuit_breaker_active = True
                self.circuit_breaker_activated_at = datetime.now()
                self.circuit_breaker_trigger_reason = f"CONSECUTIVE_LOSSES_{self.consecutive_losses}"
                self.logger.error(f"üö® CIRCUIT BREAKER ACTIVATED! {self.consecutive_losses} consecutive losses")
                self.logger.error(f"üõë Trading suspended for {self.circuit_breaker_cooldown_hours} hours")
    
    def _get_remaining_cooldown_hours(self) -> float:
        """
        ‚è∞ Calcular horas restantes de cooldown del circuit breaker
        
        Returns:
            float: Horas restantes de cooldown (0 si no est√° activo)
        """
        if not self.circuit_breaker_active or not self.circuit_breaker_activated_at:
            return 0.0
        
        time_since_activation = datetime.now() - self.circuit_breaker_activated_at
        cooldown_duration = timedelta(hours=self.circuit_breaker_cooldown_hours)
        remaining_time = cooldown_duration - time_since_activation
        
        if remaining_time.total_seconds() <= 0:
            return 0.0
        
        return remaining_time.total_seconds() / 3600
    
    def _check_drawdown_circuit_breaker(self):
        """
        üìâ Verificar circuit breaker por drawdown del portafolio
        """
        try:
            portfolio_summary = db_manager.get_portfolio_summary(is_paper=True)
            current_value = portfolio_summary.get("total_value", 0)
            
            # Actualizar pico del portafolio
            if current_value > self.peak_portfolio_value:
                self.peak_portfolio_value = current_value
                self.current_drawdown = 0.0
            elif self.peak_portfolio_value > 0:
                # Calcular drawdown actual
                self.current_drawdown = (self.peak_portfolio_value - current_value) / self.peak_portfolio_value
                
                # Activar circuit breaker si el drawdown excede el umbral
                if (self.current_drawdown >= self.max_drawdown_threshold and 
                    not self.circuit_breaker_active):
                    
                    self.circuit_breaker_active = True
                    self.circuit_breaker_activated_at = datetime.now()
                    self.circuit_breaker_trigger_reason = f"DRAWDOWN_{self.current_drawdown:.1%}"
                    
                    self.logger.error(f"üö® CIRCUIT BREAKER ACTIVATED BY DRAWDOWN!")
                    self.logger.error(f"üìâ Current drawdown: {self.current_drawdown:.1%} (threshold: {self.max_drawdown_threshold:.1%})")
                    self.logger.error(f"üí∞ Peak value: ${self.peak_portfolio_value:,.2f}, Current: ${current_value:,.2f}")
                    
        except Exception as e:
            self.logger.error(f"Error checking drawdown circuit breaker: {e}")
    
    def _initiate_gradual_reactivation(self):
        """
        üîÑ Iniciar reactivaci√≥n gradual del trading
        """
        try:
            if self.reactivation_phase == 0:
                # Fase 1: Solo 1 trade de prueba
                self.reactivation_phase = 1
                self.reactivation_trades_allowed = 1
                self.reactivation_success_count = 0
                self.logger.info(f"üü° Iniciando reactivaci√≥n gradual - Fase 1: {self.reactivation_trades_allowed} trade permitido")
                
            elif self.reactivation_phase == 1 and self.reactivation_success_count >= 1:
                # Fase 2: Hasta 3 trades
                self.reactivation_phase = 2
                self.reactivation_trades_allowed = 3
                self.reactivation_success_count = 0
                self.logger.info(f"üü° Reactivaci√≥n gradual - Fase 2: {self.reactivation_trades_allowed} trades permitidos")
                
            elif self.reactivation_phase == 2 and self.reactivation_success_count >= 2:
                # Fase 3: Trading normal pero con l√≠mites reducidos
                self.reactivation_phase = 3
                self.reactivation_trades_allowed = 5
                self.reactivation_success_count = 0
                self.logger.info(f"üü° Reactivaci√≥n gradual - Fase 3: {self.reactivation_trades_allowed} trades permitidos")
                
            elif self.reactivation_phase == 3 and self.reactivation_success_count >= 3:
                # Reactivaci√≥n completa
                self._complete_reactivation()
                
        except Exception as e:
            self.logger.error(f"Error in gradual reactivation: {e}")
    
    def _complete_reactivation(self):
        """
        ‚úÖ Completar reactivaci√≥n del circuit breaker
        """
        self.circuit_breaker_active = False
        self.circuit_breaker_activated_at = None
        self.consecutive_losses = 0
        self.reactivation_phase = 0
        self.reactivation_trades_allowed = 0
        self.reactivation_success_count = 0
        self.circuit_breaker_trigger_reason = ""
        
        self.logger.info(f"üü¢ Circuit breaker completamente reactivado - Trading normal restaurado")
    
    def _can_trade_during_reactivation(self) -> bool:
        """
        üîç Verificar si se puede hacer trading durante la reactivaci√≥n gradual
        """
        if self.reactivation_phase == 0:
            return True  # No hay reactivaci√≥n en curso
            
        # Contar trades ejecutados en la fase actual
        today = datetime.now().date()
        trades_today = self.stats.get("daily_trades", 0)
        
        if trades_today < self.reactivation_trades_allowed:
            return True
        else:
            self.logger.info(f"üü° L√≠mite de trades de reactivaci√≥n alcanzado: {trades_today}/{self.reactivation_trades_allowed}")
            return False
    
    def _update_reactivation_success(self, trade_was_profitable: bool):
        """
        üìä Actualizar contador de √©xito durante reactivaci√≥n
        """
        if self.reactivation_phase > 0 and trade_was_profitable:
            self.reactivation_success_count += 1
            self.logger.info(f"‚úÖ Trade exitoso durante reactivaci√≥n: {self.reactivation_success_count} en fase {self.reactivation_phase}")
            
            # Verificar si se puede avanzar a la siguiente fase
            if ((self.reactivation_phase == 1 and self.reactivation_success_count >= 1) or
                (self.reactivation_phase == 2 and self.reactivation_success_count >= 2) or
                (self.reactivation_phase == 3 and self.reactivation_success_count >= 3)):
                
                self._initiate_gradual_reactivation()
    
    def _update_strategy_stats(self):
        """
        üìà Actualizar estad√≠sticas de estrategias en la base de datos
        """
        try:
            with db_manager.get_db_session() as session:
                for strategy_name in self.strategies.keys():
                    # Buscar o crear estrategia en DB
                    db_strategy = session.query(DBStrategy).filter(
                        DBStrategy.name == f"{strategy_name}_AutoBot"
                    ).first()
                    
                    if not db_strategy:
                        db_strategy = DBStrategy(
                            name=f"{strategy_name}_AutoBot",
                            description=f"Estrategia {strategy_name} ejecutada por Trading Bot autom√°tico",
                            is_active=True,
                            is_paper_only=True
                        )
                        session.add(db_strategy)
                    
                    # Actualizar timestamp
                    db_strategy.last_trade_at = datetime.now()
                    db_strategy.updated_at = datetime.now()
                
                session.commit()
                
        except Exception as e:
            self.logger.error(f"‚ùå Error updating strategy stats: {e}")
    
    def get_status(self) -> BotStatus:
        """
        üìä Obtener estado actual del bot
        """
        uptime = "Not running"
        next_analysis = datetime.now()
        
        if self.is_running and self.start_time:
            uptime_delta = datetime.now() - self.start_time
            hours, remainder = divmod(int(uptime_delta.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            uptime = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            next_analysis = datetime.now() + timedelta(minutes=self.analysis_interval)
        
        portfolio_summary = db_manager.get_portfolio_summary(is_paper=True)
        
        # Informaci√≥n adicional del circuit breaker
        circuit_breaker_info = {
            "circuit_breaker_active": self.circuit_breaker_active,
            "consecutive_losses": self.consecutive_losses,
            "max_consecutive_losses": self.max_consecutive_losses,
            "circuit_breaker_activated_at": self.circuit_breaker_activated_at,
            "circuit_breaker_cooldown_hours": self.circuit_breaker_cooldown_hours
        }
        
        status = BotStatus(
            is_running=self.is_running,
            uptime=uptime,
            total_signals_generated=self.stats["signals_generated"],
            total_trades_executed=self.stats["trades_executed"],
            successful_trades=self.stats["successful_trades"],
            current_portfolio_value=portfolio_summary.get("total_value", 0),
            total_pnl=portfolio_summary.get("total_pnl", 0),
            active_strategies=list(self.strategies.keys()),
            last_analysis_time=datetime.now() - timedelta(minutes=self.analysis_interval) if self.is_running else datetime.now(),
            next_analysis_time=next_analysis
        )
        
        # Agregar informaci√≥n del circuit breaker como atributo adicional
        status.circuit_breaker_info = circuit_breaker_info
        
        return status
    
    def get_portfolio_summary(self) -> Dict:
        """
        üìä Obtener resumen del portfolio
        
        Returns:
            Dict: Resumen del portfolio
        """
        return self.paper_trader.get_portfolio_summary()
    
    def get_detailed_report(self) -> Dict:
        """
        üìã Obtener reporte detallado del bot
        """
        status = self.get_status()
        portfolio_summary = db_manager.get_portfolio_summary(is_paper=True)
        risk_report = self.risk_manager.generate_risk_report()
        open_positions = self.paper_trader.get_open_positions()
        
        return {
            "bot_status": {
                "is_running": status.is_running,
                "uptime": status.uptime,
                "analysis_interval_minutes": self.analysis_interval,
                "next_analysis": status.next_analysis_time.isoformat(),
                "enable_trading": self.enable_trading
            },
            "trading_stats": {
                "total_signals_generated": status.total_signals_generated,
                "total_trades_executed": status.total_trades_executed,
                "successful_trades": status.successful_trades,
                "win_rate": (status.successful_trades / max(1, status.total_trades_executed)) * 100,
                "daily_trades": self.stats["daily_trades"],
                "daily_limit": self.max_daily_trades
            },
            "portfolio": {
                "current_value": status.current_portfolio_value,
                "total_pnl": status.total_pnl,
                "total_return_percentage": ((status.current_portfolio_value - self.config.DEFAULT_PORTFOLIO_VALUE) / self.config.DEFAULT_PORTFOLIO_VALUE) * 100,
                "assets": portfolio_summary.get("assets", [])
            },
            "strategies": {
                "active": status.active_strategies,
                "symbols_monitored": self.symbols,
                "min_confidence_threshold": self.min_confidence_threshold
            },
            "risk_management": {
                **risk_report,
                "circuit_breaker": {
                    "active": self.circuit_breaker_active,
                    "consecutive_losses": self.consecutive_losses,
                    "max_consecutive_losses": self.max_consecutive_losses,
                    "activated_at": self.circuit_breaker_activated_at.isoformat() if self.circuit_breaker_activated_at else None,
                    "cooldown_hours": self.circuit_breaker_cooldown_hours,
                    "remaining_cooldown_hours": self._get_remaining_cooldown_hours() if hasattr(self, '_get_remaining_cooldown_hours') else 0
                }
            },
            "open_positions": open_positions,
            "position_monitor": {
                "status": self.position_monitor.get_monitoring_status(),
                "active_positions": len(open_positions)
            },
            "configuration": {
                "analysis_interval_minutes": self.analysis_interval,
                "max_daily_trades": self.max_daily_trades,
                "min_confidence_threshold": self.min_confidence_threshold,
                "enable_trading": self.enable_trading
            },
            "timestamp": datetime.now().isoformat()
        }
    
    def get_configuration(self) -> Dict:
        """
        üìã Obtener configuraci√≥n actual del bot
        """
        try:
            active_strategies = [name for name, strategy in self.strategies.items()]
            
            return {
                'analysis_interval_minutes': self.analysis_interval,
                'active_strategies': active_strategies,
                'is_running': self.is_running,
                'total_strategies': len(self.strategies),
                'uptime_hours': (datetime.now() - self.start_time).total_seconds() / 3600 if self.start_time else 0,
                'max_daily_trades': self.max_daily_trades,
                'min_confidence_threshold': self.min_confidence_threshold,
                'enable_trading': self.enable_trading,
                'symbols': self.symbols
            }
        except Exception as e:
            self.logger.error(f"‚ùå Error obteniendo configuraci√≥n: {e}")
            return {}
    
    def update_configuration(self, config: Dict):
        """
        ‚öôÔ∏è Actualizar configuraci√≥n del bot
        
        Args:
            config: Diccionario con nueva configuraci√≥n
        """
        try:
            if "analysis_interval_minutes" in config:
                self.analysis_interval = max(1, config["analysis_interval_minutes"])
                self.logger.info(f"‚öôÔ∏è Analysis interval updated to {self.analysis_interval} minutes")
            
            if "max_daily_trades" in config:
                self.max_daily_trades = max(1, config["max_daily_trades"])
                self.logger.info(f"‚öôÔ∏è Max daily trades updated to {self.max_daily_trades}")
            
            if "min_confidence_threshold" in config:
                self.min_confidence_threshold = max(0, min(100, config["min_confidence_threshold"]))
                self.logger.info(f"‚öôÔ∏è Min confidence threshold updated to {self.min_confidence_threshold}%")
            
            if "enable_trading" in config:
                self.enable_trading = bool(config["enable_trading"])
                status = "enabled" if self.enable_trading else "disabled"
                self.logger.info(f"‚öôÔ∏è Trading execution {status}")
            
            if "symbols" in config and isinstance(config["symbols"], list):
                self.symbols = config["symbols"]
                self.logger.info(f"‚öôÔ∏è Symbols updated: {', '.join(self.symbols)}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error updating configuration: {e}")
    
    def _run_first_analysis(self):
        """
        üîÑ Ejecutar primer an√°lisis y eliminar del schedule
        """
        try:
            self.logger.info("üîÑ Running first analysis...")
            self._run_analysis_cycle()
            # Eliminar este job del schedule despu√©s de ejecutarlo
            schedule.clear('first_analysis')
            self.logger.info("‚úÖ First analysis completed and removed from schedule")
        except Exception as e:
            self.logger.error(f"‚ùå Error in first analysis: {e}")
            schedule.clear('first_analysis')
    
    def force_analysis(self):
        """
        üîÑ Forzar an√°lisis inmediato (√∫til para testing)
        """
        if self.is_running:
            self.logger.info("üîÑ Forcing immediate analysis...")
            self._run_analysis_cycle()
        else:
            self.logger.warning("‚ö†Ô∏è Bot is not running - cannot force analysis")
    
    def emergency_stop(self):
        """
        üö® Parada de emergencia (cierra todas las posiciones)
        """
        self.logger.warning("üö® EMERGENCY STOP INITIATED")
        
        try:
            # Detener el bot
            self.stop()
            
            # Obtener posiciones abiertas
            open_positions = self.paper_trader.get_open_positions()
            
            if open_positions:
                self.logger.warning(f"üö® Closing {len(open_positions)} open positions...")
                
                # Aqu√≠ podr√≠as implementar l√≥gica para cerrar posiciones autom√°ticamente
                # Por ahora solo loggeamos
                for position in open_positions:
                    self.logger.warning(f"   üìä Open position: {position['symbol']} - ${position['entry_value']:.2f}")
            
            self.logger.warning("üö® Emergency stop completed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error during emergency stop: {e}")
    
    def test_connection(self) -> bool:
        """üîå Probar conexi√≥n con la API de Binance
        
        Returns:
            bool: True si la conexi√≥n es exitosa, False en caso contrario
        """
        try:
            import ccxt
            
            # Obtener credenciales desde variables de entorno
            api_key = os.getenv('BINANCE_API_KEY')
            secret_key = os.getenv('BINANCE_SECRET_KEY')
            testnet = os.getenv('BINANCE_TESTNET', 'true').lower() == 'true'
            
            if not api_key or not secret_key:
                self.logger.error("‚ùå Credenciales de API no encontradas")
                return False
            
            # Crear instancia de exchange
            exchange = ccxt.binance({
                'apiKey': api_key,
                'secret': secret_key,
                'sandbox': testnet,
                'enableRateLimit': True
            })
            
            # Probar conexi√≥n
            balance = exchange.fetch_balance()
            self.logger.info("‚úÖ Conexi√≥n con Binance exitosa")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error de conexi√≥n con Binance: {e}")
            return False
    
    def _start_position_adjustment_monitoring(self):
        """üéØ Iniciar monitoreo de ajustes de posiciones TP/SL"""
        try:
            # Configurar callback para eventos de ajuste
            self.position_adjuster.set_adjustment_callback(self._on_position_adjusted)
            
            # Iniciar monitoreo en hilo separado con wrapper para async
            self.adjustment_thread = threading.Thread(
                target=self._run_position_monitoring_async,
                daemon=True
            )
            self.adjustment_thread.start()
            
            self.logger.info("üéØ Position adjustment monitoring started")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error starting position adjustment monitoring: {e}")
    
    def _run_position_monitoring_async(self):
        """üîÑ Wrapper para ejecutar el monitoreo async en un hilo"""
        try:
            # Crear un nuevo loop de eventos para este hilo
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # Ejecutar el monitoreo async
            loop.run_until_complete(self.position_adjuster.start_monitoring())
            
        except Exception as e:
            self.logger.error(f"‚ùå Error in position monitoring thread: {e}")
        finally:
            try:
                loop.close()
            except:
                pass
    
    def _on_position_adjusted(self, adjustment_data: Dict):
        """üì¢ Callback cuando se ajusta una posici√≥n"""
        try:
            # Emitir evento de ajuste
            self._emit_adjustment_event(adjustment_data)
            
            # Log del ajuste
            symbol = adjustment_data.get('symbol', 'Unknown')
            old_tp = adjustment_data.get('old_tp', 0)
            old_sl = adjustment_data.get('old_sl', 0)
            new_tp = adjustment_data.get('new_tp', 0)
            new_sl = adjustment_data.get('new_sl', 0)
            
            self.logger.info(f"üéØ Position adjusted for {symbol}:")
            self.logger.info(f"   TP: {old_tp:.4f} ‚Üí {new_tp:.4f}")
            self.logger.info(f"   SL: {old_sl:.4f} ‚Üí {new_sl:.4f}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error in position adjustment callback: {e}")
    
    def _emit_trade_event(self, signal: TradingSignal, trade_result: TradeResult, risk_assessment):
        """üì¢ Emitir evento de trade ejecutado"""
        try:
            event = {
                'type': 'trade_executed',
                'timestamp': datetime.now(),
                'symbol': signal.symbol,
                'signal_type': signal.signal_type,
                'confidence': signal.confidence_score,
                'entry_price': trade_result.entry_price,
                'quantity': trade_result.quantity,
                'tp_price': getattr(signal, 'take_profit', None),
                'sl_price': getattr(signal, 'stop_loss', None),
                'risk_score': risk_assessment.overall_risk_score,
                'position_size': risk_assessment.position_sizing.recommended_size,
                'success': trade_result.success,
                'message': trade_result.message
            }
            
            self.event_queue.put(event, block=False)
            
        except queue.Full:
            self.logger.warning("‚ö†Ô∏è Event queue full, dropping trade event")
        except Exception as e:
            self.logger.error(f"‚ùå Error emitting trade event: {e}")
    
    def _emit_adjustment_event(self, adjustment_data: Dict):
        """üì¢ Emitir evento de ajuste de posici√≥n"""
        try:
            event = {
                'type': 'position_adjustment',
                'timestamp': datetime.now(),
                **adjustment_data
            }
            
            self.event_queue.put(event, block=False)
            
        except queue.Full:
            self.logger.warning("‚ö†Ô∏è Event queue full, dropping adjustment event")
        except Exception as e:
            self.logger.error(f"‚ùå Error emitting adjustment event: {e}")
    
    def _emit_analysis_event(self, signals_count: int, daily_trades: int):
        """üì¢ Emitir evento de an√°lisis completado"""
        try:
            event = {
                'type': 'analysis_completed',
                'timestamp': datetime.now(),
                'signals_generated': signals_count,
                'daily_trades': daily_trades,
                'max_daily_trades': self.max_daily_trades,
                'portfolio_value': self.stats.get('total_pnl', 0)
            }
            
            self.event_queue.put(event, block=False)
            
        except queue.Full:
            self.logger.warning("‚ö†Ô∏è Event queue full, dropping analysis event")
        except Exception as e:
            self.logger.error(f"‚ùå Error emitting analysis event: {e}")
    
    def get_events(self) -> List[Dict]:
        """üì• Obtener eventos pendientes para LiveTradingBot"""
        events = []
        try:
            while not self.event_queue.empty():
                events.append(self.event_queue.get_nowait())
        except queue.Empty:
            pass
        except Exception as e:
            self.logger.error(f"‚ùå Error getting events: {e}")
        
        return events
trading_bot = TradingBot()