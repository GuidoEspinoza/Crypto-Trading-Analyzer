"""
ü§ñ CONFIGURACI√ìN PRINCIPAL DEL BOT DE TRADING CFD
===============================================

Este m√≥dulo centraliza todas las configuraciones del sistema de trading automatizado,
proporcionando una arquitectura modular y escalable para la gesti√≥n de par√°metros.

üìã CONTENIDO DEL M√ìDULO:
    üîß Configuraciones de Perfiles de Trading
    üí∞ Configuraciones de Gesti√≥n de Riesgo
    üìä Configuraciones de Paper Trading
    üéØ Configuraciones de Estrategias
    üìà Configuraciones de Indicadores T√©cnicos
    ‚è∞ Configuraciones de Horarios Inteligentes
    üåê Configuraciones de APIs y Conexiones
    üíæ Configuraciones de Cache y Rendimiento
    üìù Configuraciones de Logging
    üîç Configuraciones de Monitoreo
    ‚úÖ Validaci√≥n y Inicializaci√≥n Autom√°tica

üèóÔ∏è ARQUITECTURA MODULAR:
    - profiles_config.py: Perfiles de trading (SCALPING, INTRADAY)
    - time_trading_config.py: Horarios y programaci√≥n temporal
    - symbols_config.py: S√≠mbolos y configuraci√≥n de mercados
    - main_config.py: Configuraci√≥n principal y clases centralizadas

‚ö° PERFILES DE TRADING ESPECIALIZADOS:
    üî• SCALPING: Timeframes 1m-5m, m√°xima frecuencia, ganancias r√°pidas ultra-agresivas
        ‚Ä¢ Operaciones de alta velocidad con stop-loss ajustados
        ‚Ä¢ An√°lisis cada 30 segundos para m√°xima reactividad
        ‚Ä¢ Gesti√≥n de riesgo conservadora para proteger capital

    üìà INTRADAY: Timeframes 15m-1h, operaciones diarias, balance entre velocidad y precisi√≥n
        ‚Ä¢ Operaciones de mediano plazo con an√°lisis profundo
        ‚Ä¢ An√°lisis cada 5 minutos para decisiones informadas
        ‚Ä¢ Mayor tolerancia al riesgo para capturas de tendencias

üéØ CAMBIO R√ÅPIDO DE PERFILES:
    Para cambiar entre configuraciones, modifica la variable TRADING_PROFILE en profiles_config.py:
    - "SCALPING" para estrategia ultra-r√°pida de ganancias inmediatas
    - "INTRADAY" para estrategia diaria balanceada con mayor precisi√≥n

üõ°Ô∏è CARACTER√çSTICAS DE SEGURIDAD:
    ‚ú® Validaci√≥n autom√°tica de par√°metros en tiempo real
    üîí L√≠mites de riesgo din√°micos por perfil
    ‚è∞ Horarios inteligentes optimizados para mercados globales en UTC
    üìä Monitoreo continuo de rendimiento y drawdown
    üö® Sistema de alertas y notificaciones autom√°ticas

üë®‚Äçüíª AUTOR: Sistema de Trading Automatizado
üìÖ √öLTIMA ACTUALIZACI√ìN: 2024
üîÑ VERSI√ìN: 3.0 - Arquitectura Modular Avanzada
"""

import logging
import os
from typing import List, Dict, Any
from dotenv import load_dotenv

# Carga de variables de entorno desde .env si est√° presente
load_dotenv()

# ============================================================================
# üì¶ IMPORTACIONES DE CONFIGURACIONES MODULARIZADAS
# ============================================================================

# üéØ S√≠mbolos de Trading: Lista de activos disponibles para operar
from .symbols_config import GLOBAL_SYMBOLS

# üë§ Perfiles de Trading: Configuraciones especializadas (SCALPING/INTRADAY)
from .profiles_config import TRADING_PROFILE, PROFILES

# ‚è∞ Configuraciones Temporales: Horarios, zonas horarias y programaci√≥n
from .time_trading_config import (
    TIMEZONE,  # Zona horaria principal del sistema
    UTC_TZ,  # Zona horaria UTC para trading global
    DAILY_RESET_HOUR,  # Hora de reinicio diario del sistema
    DAILY_RESET_MINUTE,  # Minuto de reinicio diario del sistema
    SMART_TRADING_HOURS,  # Horarios inteligentes optimizados
    TRADING_SCHEDULE,  # Programaci√≥n semanal de trading
    SCALPING_WEEKEND_TRADING,  # Configuraci√≥n de trading en fines de semana (Scalping)
    INTRADAY_WEEKEND_TRADING,  # Configuraci√≥n de trading en fines de semana (Intraday)
    PROFILE_TRADING_SCHEDULE,  # Horarios espec√≠ficos por perfil
    # Funciones relacionadas con tiempo
    is_trading_day_allowed,  # Validaci√≥n de d√≠as de trading
    get_weekend_trading_params,  # Par√°metros de trading de fin de semana
    is_smart_trading_hours_allowed,  # Validaci√≥n de horarios inteligentes
    get_smart_trading_status_summary,  # Resumen de estado de horarios
    _detect_market_type,  # Detecci√≥n de tipo de mercado
)

# ============================================================================
# üìù CONFIGURACI√ìN DE LOGGING Y UTILIDADES
# ============================================================================

# üìä Logger principal para validaci√≥n y monitoreo del sistema
logger = logging.getLogger(__name__)


def _get_env_float(var_name: str, default: float) -> float:
    """
    üîß Utilidad para leer variables de entorno como float con fallback seguro.

    Args:
        var_name (str): Nombre de la variable de entorno
        default (float): Valor por defecto si la variable no existe o est√° vac√≠a

    Returns:
        float: Valor de la variable de entorno o valor por defecto

    Example:
        >>> balance = _get_env_float("INITIAL_BALANCE", 1000.0)
        >>> # Retorna el valor de INITIAL_BALANCE o 1000.0 si no existe
    """
    value = os.getenv(var_name)
    if value is None or value == "":
        return default
    try:
        return float(value)
    except Exception:
        logger.warning(
            f"Valor inv√°lido para {var_name}: {value}, usando default {default}"
        )
        return default


# Utilidad para leer variables de entorno como boolean con fallback seguro
def _get_env_bool(var_name: str, default: bool) -> bool:
    value = os.getenv(var_name)
    if value is None or value == "":
        return default

    # Convertir string a boolean
    value_lower = value.lower().strip()
    if value_lower in ("true", "1", "yes", "on", "enabled"):
        return True
    elif value_lower in ("false", "0", "no", "off", "disabled"):
        return False
    else:
        logger.warning(
            f"Valor inv√°lido para {var_name}: {value}, usando default {default}"
        )
        return default


class TradingProfiles:
    """
    üéØ Gesti√≥n centralizada de perfiles de trading especializados para CFDs.

    Esta clase proporciona una interfaz unificada para acceder a las configuraciones
    de los diferentes perfiles de trading (SCALPING, INTRADAY) definidos en
    profiles_config.py.

    üîß FUNCIONALIDADES:
        ‚Ä¢ Acceso din√°mico al perfil activo
        ‚Ä¢ Validaci√≥n autom√°tica de perfiles
        ‚Ä¢ M√©todos getter para todos los par√°metros
        ‚Ä¢ Compatibilidad con c√≥digo legacy

    üìä PERFILES DISPONIBLES:
        üî• SCALPING: Trading de alta frecuencia (1m-5m)
        üìà INTRADAY: Trading diario balanceado (15m-1h)
    """

    # üìã Referencia a los perfiles importados desde profiles_config.py
    PROFILES = PROFILES

    @classmethod
    def get_profile(cls, profile_name: str) -> Dict[str, Any]:
        """
        üìã Obtiene la configuraci√≥n del perfil especificado.

        Args:
            profile_name (str): Nombre del perfil ('SCALPING' o 'INTRADAY')

        Returns:
            Dict[str, Any]: Configuraci√≥n completa del perfil

        Raises:
            ValueError: Si el perfil no existe
        """
        if profile_name not in PROFILES:
            raise ValueError(
                f"Perfil '{profile_name}' no v√°lido. Opciones: {list(PROFILES.keys())}"
            )
        return PROFILES[profile_name]

    @classmethod
    def get_current_profile(cls) -> Dict[str, Any]:
        """Obtiene el perfil actualmente configurado."""
        return cls.get_profile(TRADING_PROFILE)

    @classmethod
    def get_max_daily_trades(cls) -> int:
        """M√°ximo de trades diarios seg√∫n perfil activo."""
        return cls.get_current_profile()["max_daily_trades"]

    @classmethod
    def get_adaptive_daily_trades_limit(
        cls, current_trades_count: int = 0, signal_confidence: float = 0.0
    ) -> int:
        """
        Calcula el l√≠mite adaptativo de trades diarios basado en la confianza de la se√±al.

        Args:
            current_trades_count: N√∫mero actual de trades realizados hoy
            signal_confidence: Confianza de la se√±al actual (0-100)

        Returns:
            L√≠mite m√°ximo de trades permitidos para el d√≠a
        """
        profile = cls.get_current_profile()
        base_limit = profile["max_daily_trades"]

        # Si el perfil no tiene configuraci√≥n adaptativa, usar l√≠mite base
        if not profile.get("max_daily_trades_adaptive", False):
            return base_limit

        # Obtener configuraci√≥n adaptativa
        quality_threshold = profile.get("daily_trades_quality_threshold", 80.0)
        bonus_trades = profile.get("max_daily_trades_bonus", 0)

        # Si la se√±al tiene alta confianza, permitir trades adicionales
        if signal_confidence >= quality_threshold:
            return base_limit + bonus_trades

        # Para se√±ales de confianza normal, usar l√≠mite base
        return base_limit

    @classmethod
    def get_max_consecutive_losses(cls) -> int:
        """Obtiene el l√≠mite de p√©rdidas consecutivas seg√∫n el perfil activo."""
        profile = cls.get_current_profile()

        # Calcular l√≠mite din√°mico basado en max_daily_trades
        max_trades = profile["max_daily_trades"]

        # L√≠mite conservador: 20% del m√°ximo de trades diarios
        base_limit = max(
            3, int(max_trades * 0.20)
        )  # M√≠nimo 3, m√°ximo 20% de trades diarios

        # Ajuste por confianza: si la confianza es muy alta, permitir un poco m√°s de tolerancia
        min_confidence = profile["min_confidence"]
        if min_confidence >= 80.0:
            # Para confianza muy alta (‚â•80%), permitir 1-2 p√©rdidas adicionales
            confidence_bonus = 2
        elif min_confidence >= 75.0:
            # Para confianza alta (‚â•75%), permitir 1 p√©rdida adicional
            confidence_bonus = 1
        else:
            # Para confianza normal (<75%), no hay bonus
            confidence_bonus = 0

        # L√≠mite final con bonus por confianza
        final_limit = base_limit + confidence_bonus

        # Asegurar que no exceda un m√°ximo razonable (30% de trades diarios)
        max_allowed = int(max_trades * 0.30)

        return min(final_limit, max_allowed)


# ============================================================================
# üè≠ CONFIGURACI√ìN DEL MODO DE OPERACI√ìN DEL SISTEMA
# ============================================================================
"""
Esta secci√≥n define el modo de operaci√≥n del sistema (desarrollo vs producci√≥n)
y configura autom√°ticamente las caracter√≠sticas dependientes del modo.
"""

# üéØ Modo principal del sistema
PRODUCTION_MODE = (
    _get_env_float("PRODUCTION_MODE", 0.0) == 1.0
)  # False por defecto (modo desarrollo)

# üìä Configuraciones de trading dependientes del modo
# Dashboard eliminado - usando Capital.com directamente para mayor eficiencia
PAPER_TRADING_ONLY = (
    not PRODUCTION_MODE
)  # Paper trading en desarrollo, trading real en producci√≥n

ENABLE_REAL_TRADING = _get_env_bool(
    "ENABLE_REAL_TRADING", PRODUCTION_MODE
)  # Trading real configurado por variable de entorno o modo de producci√≥n

# üîç Configuraciones de logging y debugging
VERBOSE_LOGGING = not PRODUCTION_MODE  # Logging detallado habilitado en desarrollo
ENABLE_DEBUG_FEATURES = (
    not PRODUCTION_MODE
)  # Caracter√≠sticas de debug solo en desarrollo

# ============================================================================
# üí∞ CONFIGURACI√ìN DE BALANCE
# ============================================================================


def _get_capital_balance() -> float:
    """
    Obtiene el balance disponible real de la cuenta de Capital.com

    Returns:
        float: Balance disponible en USD, o 0.0 si hay error
    """
    try:
        # Importaci√≥n diferida para evitar dependencias circulares
        import sys
        import importlib

        # Importar din√°micamente el m√≥dulo
        capital_module = importlib.import_module("src.core.capital_client")
        create_capital_client_from_env = getattr(
            capital_module, "create_capital_client_from_env"
        )

        # Crear cliente de Capital.com
        capital_client = create_capital_client_from_env()

        # Obtener balance disponible
        balance_info = capital_client.get_available_balance()

        if balance_info and "available" in balance_info:
            available_balance = float(balance_info["available"])
            print(f"‚úÖ Balance real obtenido de Capital.com: ${available_balance:,.2f}")
            return available_balance
        else:
            print(
                "‚ö†Ô∏è No se pudo obtener el balance de Capital.com, usando balance por defecto"
            )
            return 0.0

    except Exception as e:
        print(f"‚ùå Error al obtener balance de Capital.com: {e}")
        return 0.0


# üí∞ Balance inicial global para todas las posiciones en USD (paper trading)
PAPER_GLOBAL_INITIAL_BALANCE = 1000.0

# üí∞ Balance inicial global para todas las posiciones en USD (real trading)
# Se obtiene din√°micamente de Capital.com cuando ENABLE_REAL_TRADING est√° habilitado
REAL_GLOBAL_INITIAL_BALANCE = (
    0.0  # Se inicializa en 0, se obtiene din√°micamente cuando se necesite
)


def get_global_initial_balance() -> float:
    """
    Obtiene el balance inicial global din√°micamente seg√∫n el modo de trading.

    Esta funci√≥n determina autom√°ticamente si usar el balance de paper trading
    o el balance real de Capital.com bas√°ndose en la configuraci√≥n actual.

    Returns:
        float: Balance inicial en USD

    Note:
        - En modo paper trading: retorna PAPER_GLOBAL_INITIAL_BALANCE
        - En modo real trading: obtiene y cachea el balance de Capital.com
        - El balance real se obtiene solo una vez para optimizar rendimiento
    """
    global REAL_GLOBAL_INITIAL_BALANCE

    if _get_env_bool("ENABLE_REAL_TRADING", False):
        # Si el trading real est√° habilitado, obtener balance real de Capital.com
        if (
            REAL_GLOBAL_INITIAL_BALANCE == 0.0
        ):  # Solo obtener si no se ha obtenido antes (cache)
            REAL_GLOBAL_INITIAL_BALANCE = _get_capital_balance()
        return REAL_GLOBAL_INITIAL_BALANCE
    else:
        # Si no, usar balance de paper trading
        return PAPER_GLOBAL_INITIAL_BALANCE


# üí∞ Balance inicial global para todas las posiciones en USD
# Usa balance real si el trading real est√° habilitado, sino usa paper trading
GLOBAL_INITIAL_BALANCE = PAPER_GLOBAL_INITIAL_BALANCE  # Por defecto paper trading, se actualiza din√°micamente

# üíµ Precio base de USD (moneda fiat de referencia)
USD_BASE_PRICE = 1.0

# ============================================================================
# ü§ñ CONFIGURACI√ìN DEL TRADING BOT PRINCIPAL
# ============================================================================


class TradingBotConfig:
    """
    Configuraci√≥n principal del trading bot con par√°metros din√°micos basados en perfiles.

    Esta clase centraliza toda la configuraci√≥n del bot de trading, proporcionando
    m√©todos de clase para obtener par√°metros espec√≠ficos seg√∫n el perfil activo.
    Todos los valores se obtienen din√°micamente del perfil actual, permitiendo
    cambios de configuraci√≥n sin reiniciar el sistema.

    Caracter√≠sticas principales:
    - ‚öôÔ∏è Configuraci√≥n din√°mica basada en perfiles de trading
    - üìä Par√°metros espec√≠ficos para an√°lisis t√©cnico y timeframes
    - üîÑ Intervalos de actualizaci√≥n y monitoreo configurables
    - üõ°Ô∏è L√≠mites de riesgo y gesti√≥n de posiciones
    - üéØ Umbrales de confianza adaptativos por perfil

    Perfiles soportados:
    - Scalping: Trading de alta frecuencia con timeframes cortos
    - Intraday: Trading intrad√≠a con an√°lisis de tendencias
    - Swing: Trading de posiciones a medio plazo
    - Conservative: Trading conservador con bajo riesgo

    Uso:
        # Obtener configuraci√≥n din√°mica del perfil activo
        interval = TradingBotConfig.get_analysis_interval()
        threshold = TradingBotConfig.get_min_confidence_threshold()
        timeframes = TradingBotConfig.get_professional_timeframes()

    Nota:
        Todos los m√©todos son de clase (@classmethod) para acceso directo
        sin necesidad de instanciar la clase.
    """

    """Configuraci√≥n principal del bot de trading."""

    # Lista de s√≠mbolos para analizar - Optimizada para trading
    # Selecci√≥n basada en alta liquidez, volatilidad y volumen de trading
    SYMBOLS = GLOBAL_SYMBOLS

    # S√≠mbolos para el bot en vivo - Misma lista optimizada
    SYMBOLS_LIVE_BOT = GLOBAL_SYMBOLS

    # üéØ CONFIGURACI√ìN DIN√ÅMICA BASADA EN PERFIL SELECCIONADO

    @classmethod
    def get_analysis_interval(cls) -> int:
        """
        Obtiene el intervalo de an√°lisis en minutos seg√∫n el perfil activo.

        Returns:
            int: Intervalo en minutos entre an√°lisis (ej: 1 para Scalping, 15 para Swing)
        """
        return TradingProfiles.get_current_profile()["analysis_interval"]

    @classmethod
    def get_min_confidence_threshold(cls) -> float:
        """
        Obtiene el umbral m√≠nimo de confianza para ejecutar trades seg√∫n el perfil.

        Returns:
            float: Porcentaje de confianza m√≠nimo (0-100) para abrir posiciones
        """
        return TradingProfiles.get_current_profile()["min_confidence"]

    @classmethod
    def get_max_concurrent_positions(cls) -> int:
        """
        Obtiene el m√°ximo n√∫mero de posiciones concurrentes permitidas.

        Returns:
            int: N√∫mero m√°ximo de posiciones abiertas simult√°neamente
        """
        return TradingProfiles.get_current_profile()["max_positions"]

    @classmethod
    def get_professional_timeframes(cls) -> List[str]:
        """
        Obtiene los timeframes profesionales para an√°lisis t√©cnico seg√∫n el perfil.

        Returns:
            List[str]: Lista de timeframes (ej: ['1m', '5m', '15m'] para Scalping)
        """
        return TradingProfiles.get_current_profile()["timeframes"]

    # üí∞ CONFIGURACI√ìN DE PORTFOLIO Y VALORES BASE
    @classmethod
    def get_default_portfolio_value(cls) -> float:
        """
        Obtiene el valor por defecto del portfolio para c√°lculos iniciales.

        Returns:
            float: Valor del balance inicial global (paper o real seg√∫n configuraci√≥n)
        """
        return get_global_initial_balance()

    DEFAULT_PORTFOLIO_VALUE: float = (
        1000.0  # Valor por defecto, se actualiza din√°micamente
    )

    # ‚è±Ô∏è CONFIGURACI√ìN DE TIMEFRAMES DIN√ÅMICOS
    @classmethod
    def get_primary_timeframe(cls) -> str:
        """
        Obtiene el timeframe principal para an√°lisis seg√∫n el perfil activo.

        Returns:
            str: Timeframe principal (primer elemento de la lista de timeframes del perfil)
        """
        timeframes = cls.get_professional_timeframes()
        return timeframes[0] if timeframes else "1m"

    @classmethod
    def get_confirmation_timeframe(cls) -> str:
        """
        Obtiene el timeframe de confirmaci√≥n para validar se√±ales.

        Returns:
            str: Timeframe de confirmaci√≥n (segundo elemento o el primero si solo hay uno)
        """
        timeframes = cls.get_professional_timeframes()
        return timeframes[1] if len(timeframes) > 1 else timeframes[0]

    @classmethod
    def get_trend_timeframe(cls) -> str:
        """
        Obtiene el timeframe de tendencia para an√°lisis de contexto mayor.

        Returns:
            str: Timeframe de tendencia (√∫ltimo elemento de la lista de timeframes)
        """
        timeframes = cls.get_professional_timeframes()
        return timeframes[-1] if timeframes else "15m"

    # üìù CONFIGURACI√ìN DE DESCRIPCI√ìN Y METADATOS
    @classmethod
    def get_bot_description(cls) -> str:
        """Descripci√≥n del bot seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["name"]

    @classmethod
    def get_live_update_interval(cls) -> int:
        """Intervalo de actualizaci√≥n del live bot en minutos seg√∫n perfil."""
        return TradingProfiles.get_current_profile()["analysis_interval"]

    @classmethod
    def get_first_analysis_delay(cls) -> int:
        """Delay para primer an√°lisis (en minutos) seg√∫n perfil."""
        # Usar el doble del intervalo de an√°lisis como delay inicial
        return TradingProfiles.get_current_profile()["analysis_interval"] * 2

    @classmethod
    def get_monitoring_interval(cls) -> int:
        """Intervalo de monitoreo de posiciones seg√∫n perfil."""
        return TradingProfiles.get_current_profile().get(
            "position_monitoring_interval", 30
        )

    @classmethod
    def get_position_monitoring_enabled(cls) -> bool:
        """Indica si el monitoreo autom√°tico de posiciones est√° habilitado seg√∫n perfil."""
        return TradingProfiles.get_current_profile().get(
            "enable_position_monitoring", False
        )

    @classmethod
    def get_cleanup_interval(cls) -> int:
        """Intervalo de limpieza seg√∫n perfil."""
        return TradingProfiles.get_current_profile().get("cleanup_interval", 10)

    @classmethod
    def get_thread_join_timeout(cls) -> int:
        """Timeout para join de threads seg√∫n perfil."""
        return TradingProfiles.get_current_profile().get("thread_join_timeout", 10)

    @classmethod
    def get_executor_shutdown_timeout(cls) -> int:
        """Timeout para shutdown de executor seg√∫n perfil."""
        return TradingProfiles.get_current_profile().get(
            "executor_shutdown_timeout", 30
        )

    @classmethod
    def get_analysis_future_timeout(cls) -> int:
        """Timeout para futures de an√°lisis seg√∫n perfil."""
        return TradingProfiles.get_current_profile().get("analysis_future_timeout", 30)

    @classmethod
    def get_max_consecutive_losses(cls) -> int:
        """M√°ximo de p√©rdidas consecutivas antes de activar circuit breaker seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_consecutive_losses"]


# ============================================================================
# üìä CONFIGURACI√ìN DEL PAPER TRADER
# ============================================================================


class PaperTraderConfig:
    """
    Configuraci√≥n del simulador de trading (Paper Trading) con par√°metros din√°micos.

    Esta clase gestiona toda la configuraci√≥n para el trading simulado, permitiendo
    probar estrategias sin riesgo financiero real. Los par√°metros se obtienen
    din√°micamente del perfil activo para mantener consistencia con la estrategia.

    Caracter√≠sticas principales:
    - üí∞ Balance inicial configurable por perfil
    - üéØ L√≠mites de posici√≥n y exposici√≥n adaptativos
    - üìà Umbrales de confianza espec√≠ficos para paper trading
    - üîí Controles de riesgo y liquidez
    - ‚ö° Simulaci√≥n de slippage realista

    Funcionalidades:
    - Gesti√≥n autom√°tica del balance inicial
    - Validaci√≥n de tama√±os de posici√≥n
    - Control de exposici√≥n total del portfolio
    - Simulaci√≥n de condiciones de mercado reales
    - M√©tricas de rendimiento y an√°lisis

    Uso:
        # Obtener configuraci√≥n din√°mica
        balance = PaperTraderConfig.get_initial_balance()
        max_pos = PaperTraderConfig.get_max_position_size()
        threshold = PaperTraderConfig.get_min_confidence_threshold()

    Nota:
        El paper trading es esencial para validar estrategias antes del
        trading real y para desarrollo de nuevas funcionalidades.
    """

    """Configuraci√≥n del simulador de trading (paper trading)."""

    # Balance inicial en USD para simulaci√≥n
    @classmethod
    def get_initial_balance(cls) -> float:
        """Obtiene el balance inicial seg√∫n configuraci√≥n."""
        return get_global_initial_balance()

    INITIAL_BALANCE: float = 1000.0  # Valor por defecto, se actualiza din√°micamente

    @classmethod
    def get_max_position_size(cls) -> float:
        """Obtiene el tama√±o m√°ximo de posici√≥n seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_position_size_percent"] / 100

    @classmethod
    def get_max_total_exposure(cls) -> float:
        """Obtiene la exposici√≥n total m√°xima seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_total_exposure_percent"] / 100

    @classmethod
    def get_min_trade_value(cls) -> float:
        """Obtiene el valor m√≠nimo por trade seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["min_trade_value"]

    @classmethod
    def get_min_confidence_threshold(cls) -> float:
        """Obtiene el umbral m√≠nimo de confianza seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["paper_min_confidence"]

    @classmethod
    def get_max_slippage(cls) -> float:
        """Obtiene el slippage m√°ximo permitido seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_slippage"]

    @classmethod
    def get_min_liquidity(cls) -> float:
        """Obtiene la liquidez m√≠nima requerida seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["min_liquidity"]

    # Propiedades din√°micas para compatibilidad con c√≥digo existente
    MAX_POSITION_SIZE: float = property(
        lambda self: TradingProfiles.get_current_profile()["max_position_size"]
    )
    MAX_TOTAL_EXPOSURE: float = property(
        lambda self: TradingProfiles.get_current_profile()["max_total_exposure"]
    )
    MIN_TRADE_VALUE: float = property(
        lambda self: TradingProfiles.get_current_profile()["min_trade_value"]
    )
    MIN_CONFIDENCE_THRESHOLD: float = property(
        lambda self: TradingProfiles.get_current_profile()["paper_min_confidence"]
    )
    MAX_SLIPPAGE: float = property(
        lambda self: TradingProfiles.get_current_profile()["max_slippage"]
    )
    MIN_LIQUIDITY: float = property(
        lambda self: TradingProfiles.get_current_profile()["min_liquidity"]
    )

    # M√°ximo % del balance disponible para trading (reserva para fees)
    MAX_BALANCE_USAGE: float = 0.95


# ============================================================================
# üõ°Ô∏è CONFIGURACI√ìN DEL GESTOR DE RIESGO
# ============================================================================


class RiskManagerConfig:
    """
    Configuraci√≥n avanzada del gestor de riesgo con par√°metros din√°micos por perfil.

    Esta clase centraliza todos los par√°metros de gesti√≥n de riesgo del sistema,
    proporcionando controles adaptativos seg√∫n el perfil de trading activo.
    Incluye gesti√≥n de posiciones, stop-loss, take-profit, y circuit breakers.

    Caracter√≠sticas principales:
    - üéØ L√≠mites de riesgo por trade y diarios adaptativos
    - üìä Gesti√≥n din√°mica de tama√±os de posici√≥n
    - üîÑ ATR (Average True Range) configurables por volatilidad
    - üõë Stop-loss y take-profit inteligentes
    - ‚ö° Trailing stops y breakeven autom√°ticos
    - üö® Circuit breakers por drawdown y p√©rdidas consecutivas

    Par√°metros de riesgo:
    - Riesgo m√°ximo por trade (% del capital)
    - Riesgo diario m√°ximo acumulado
    - Umbral de drawdown para suspensi√≥n
    - Correlaci√≥n m√°xima entre posiciones
    - Multiplicadores ATR por condici√≥n de mercado

    Uso:
        # Obtener l√≠mites de riesgo din√°micos
        max_risk = RiskManagerConfig.get_max_risk_per_trade()
        atr_mult = RiskManagerConfig.get_atr_default()
        sl_pct = RiskManagerConfig.get_sl_min_percentage()

    Nota:
        La gesti√≥n de riesgo es cr√≠tica para la supervivencia del capital
        y debe ser monitoreada constantemente durante el trading.
    """

    """Configuraci√≥n del gestor de riesgo avanzado."""

    @classmethod
    def get_max_risk_per_trade(cls) -> float:
        """Obtiene el riesgo m√°ximo por trade seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_risk_per_trade_percent"] / 100

    @classmethod
    def get_max_daily_risk(cls) -> float:
        """Obtiene el riesgo m√°ximo diario seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_daily_risk_percent"] / 100

    @classmethod
    def get_max_drawdown_threshold(cls) -> float:
        """Obtiene el umbral de drawdown m√°ximo seg√∫n perfil activo."""
        return (
            TradingProfiles.get_current_profile()["max_drawdown_threshold_percent"]
            / 100
        )

    @classmethod
    def get_correlation_threshold(cls) -> float:
        """Obtiene el umbral de correlaci√≥n seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["correlation_threshold"]

    @classmethod
    def get_min_position_size(cls) -> float:
        """Obtiene el tama√±o m√≠nimo de posici√≥n seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["min_position_size"]

    @classmethod
    def get_max_position_size(cls) -> float:
        """Obtiene el tama√±o m√°ximo de posici√≥n seg√∫n perfil activo."""
        return (
            TradingProfiles.get_current_profile()["risk_max_position_size_percent"]
            / 100
        )

    @classmethod
    def get_kelly_fraction(cls) -> float:
        """Obtiene la fracci√≥n Kelly seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["kelly_fraction"]

    @classmethod
    def get_atr_multiplier_min(cls) -> float:
        """Obtiene el multiplicador ATR m√≠nimo seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["atr_multiplier_min"]

    @classmethod
    def get_atr_multiplier_max(cls) -> float:
        """Obtiene el multiplicador ATR m√°ximo seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["atr_multiplier_max"]

    @classmethod
    def get_atr_default(cls) -> float:
        """Obtiene el multiplicador ATR por defecto seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["atr_default"]

    @classmethod
    def get_atr_volatile(cls) -> float:
        """Obtiene el multiplicador ATR para mercados vol√°tiles seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["atr_volatile"]

    @classmethod
    def get_atr_sideways(cls) -> float:
        """Obtiene el multiplicador ATR para mercados laterales seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["atr_sideways"]

    @classmethod
    def get_trailing_stop_activation(cls) -> float:
        """Obtiene el umbral de activaci√≥n del trailing stop seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["trailing_stop_activation"]

    @classmethod
    def get_breakeven_threshold(cls) -> float:
        """Obtiene el umbral de breakeven seg√∫n perfil activo."""
        return (
            TradingProfiles.get_current_profile()["breakeven_threshold_percent"] / 100
        )

    @classmethod
    def get_tp_min_percentage(cls) -> float:
        """Obtiene el porcentaje m√≠nimo de Take Profit seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["tp_min_percent"] / 100

    @classmethod
    def get_tp_max_percentage(cls) -> float:
        """Obtiene el porcentaje m√°ximo de Take Profit seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["tp_max_percent"] / 100

    @classmethod
    def get_sl_min_percentage(cls) -> float:
        """Obtiene el porcentaje m√≠nimo de Stop Loss seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["sl_min_percent"] / 100

    @classmethod
    def get_sl_max_percentage(cls) -> float:
        """Obtiene el porcentaje m√°ximo de Stop Loss seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["sl_max_percent"] / 100

    @classmethod
    def get_tp_increment_percentage(cls) -> float:
        """Obtiene el porcentaje de incremento de TP seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["tp_increment_percent"]

    @classmethod
    def get_tp_confidence_threshold(cls) -> float:
        """Obtiene el umbral de confianza para ajustar TP seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["tp_confidence_threshold"]

    @classmethod
    def get_max_daily_loss_percent(cls) -> float:
        """Obtiene el porcentaje m√°ximo de p√©rdida diaria seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["max_daily_loss_percent"]

    @classmethod
    @classmethod
    def get_min_confidence_threshold(cls) -> float:
        """Obtiene el umbral m√≠nimo de confianza seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["min_confidence_threshold"]

    @classmethod
    def get_position_size_multiplier(cls) -> float:
        """Obtiene el multiplicador de tama√±o de posici√≥n seg√∫n perfil activo."""
        return TradingProfiles.get_current_profile()["position_size_multiplier"]

    # Propiedades din√°micas para compatibilidad con c√≥digo existente
    MAX_RISK_PER_TRADE: float = property(
        lambda self: TradingProfiles.get_current_profile()["max_risk_per_trade_percent"]
    )
    MAX_DAILY_RISK: float = property(
        lambda self: TradingProfiles.get_current_profile()["max_daily_risk_percent"]
    )
    MAX_DRAWDOWN_THRESHOLD: float = property(
        lambda self: TradingProfiles.get_current_profile()[
            "max_drawdown_threshold_percent"
        ]
    )
    CORRELATION_THRESHOLD: float = property(
        lambda self: TradingProfiles.get_current_profile()["correlation_threshold"]
    )
    MIN_POSITION_SIZE: float = property(
        lambda self: TradingProfiles.get_current_profile()["min_position_size"]
    )
    MAX_POSITION_SIZE: float = property(
        lambda self: TradingProfiles.get_current_profile()[
            "risk_max_position_size_percent"
        ]
    )
    KELLY_FRACTION: float = property(
        lambda self: TradingProfiles.get_current_profile()["kelly_fraction"]
    )

    ATR_MULTIPLIER_MIN: float = property(
        lambda self: TradingProfiles.get_current_profile()["atr_multiplier_min"]
    )
    ATR_MULTIPLIER_MAX: float = property(
        lambda self: TradingProfiles.get_current_profile()["atr_multiplier_max"]
    )
    ATR_DEFAULT: float = property(
        lambda self: TradingProfiles.get_current_profile()["atr_default"]
    )
    ATR_VOLATILE: float = property(
        lambda self: TradingProfiles.get_current_profile()["atr_volatile"]
    )
    ATR_SIDEWAYS: float = property(
        lambda self: TradingProfiles.get_current_profile()["atr_sideways"]
    )
    TRAILING_STOP_ACTIVATION: float = property(
        lambda self: TradingProfiles.get_current_profile()["trailing_stop_activation"]
    )
    BREAKEVEN_THRESHOLD: float = property(
        lambda self: TradingProfiles.get_current_profile()[
            "breakeven_threshold_percent"
        ]
    )

    # Valor inicial del portfolio para c√°lculos de riesgo en USD - Se alimenta del PaperTrader para consistencia
    INITIAL_PORTFOLIO_VALUE: float = (
        PaperTraderConfig.INITIAL_BALANCE
    )  # Mantiene consistencia autom√°tica


# ============================================================================
# üìä CONFIGURACI√ìN DE ESTRATEGIAS DE TRADING
# ============================================================================


class StrategyConfig:
    """
    Configuraci√≥n centralizada de las estrategias de trading.

    Esta clase proporciona configuraciones espec√≠ficas para diferentes tipos de estrategias
    de trading, incluyendo configuraciones base y especializadas para cada perfil.

    Caracter√≠sticas principales:
    - Configuraciones din√°micas basadas en perfiles activos
    - Par√°metros de confianza y ATR personalizables
    - Configuraciones base para todas las estrategias
    - Soporte para m√∫ltiples tipos de estrategias

    Estrategias soportadas:
    - Estrategias base con configuraciones generales
    - Configuraciones espec√≠ficas por perfil de trading
    - Par√°metros de confianza adaptativos

    Ejemplo de uso:
        >>> config = StrategyConfig.get_current_profile_config()
        >>> min_confidence = StrategyConfig.Base.get_default_min_confidence()
        >>> atr_period = StrategyConfig.Base.get_default_atr_period()

    Nota:
        Las configuraciones se actualizan autom√°ticamente seg√∫n el perfil activo
        y proporcionan valores por defecto seguros para todas las estrategias.
    """

    @classmethod
    def get_current_profile_config(cls) -> Dict[str, Any]:
        """
        Obtiene la configuraci√≥n completa del perfil activo.

        Returns:
            Dict[str, Any]: Diccionario con toda la configuraci√≥n del perfil actual
        """
        return TradingProfiles.get_current_profile()

    # ---- üéØ Configuraci√≥n Base de Estrategias ----
    class Base:
        """
        Configuraci√≥n base compartida por todas las estrategias de trading.

        Esta subclase proporciona par√°metros fundamentales que son utilizados
        por todas las estrategias, incluyendo niveles de confianza y per√≠odos ATR.

        Caracter√≠sticas:
        - Configuraciones din√°micas basadas en el perfil activo
        - Valores de fallback para garantizar estabilidad
        - Niveles de confianza predefinidos para diferentes tipos de se√±ales
        - Compatibilidad con c√≥digo existente

        Ejemplo de uso:
            >>> min_confidence = StrategyConfig.Base.get_default_min_confidence()
            >>> atr_period = StrategyConfig.Base.get_default_atr_period()
            >>> hold_level = StrategyConfig.Base.HOLD_CONFIDENCE
        """

        @classmethod
        def get_default_min_confidence(cls) -> float:
            """
            Obtiene la confianza m√≠nima seg√∫n el perfil activo.

            Returns:
                float: Nivel de confianza m√≠nimo (por defecto 55.0)
            """
            return TradingProfiles.get_current_profile().get(
                "default_min_confidence", 55.0
            )

        @classmethod
        def get_default_atr_period(cls) -> int:
            """
            Obtiene el per√≠odo ATR seg√∫n el perfil activo.

            Returns:
                int: Per√≠odo para el c√°lculo del ATR (por defecto 10)
            """
            return TradingProfiles.get_current_profile().get("default_atr_period", 10)

        # üìä Valores de confianza por defecto para diferentes tipos de se√±ales
        HOLD_CONFIDENCE: float = 45.0  # Se√±ales de mantener posici√≥n
        BASE_CONFIDENCE: float = 50.0  # Confianza base para se√±ales est√°ndar
        ENHANCED_CONFIDENCE: float = 60.0  # Confianza para se√±ales mejoradas

        # üîÑ Compatibilidad con c√≥digo existente (valores de fallback)
        DEFAULT_MIN_CONFIDENCE: float = 55.0  # Fallback para confianza m√≠nima
        DEFAULT_ATR_PERIOD: int = 10  # Fallback para per√≠odo ATR


# ============================================================================
# üìù CONFIGURACI√ìN DE LOGGING
# ============================================================================


class LoggingConfig:
    """
    Configuraci√≥n centralizada del sistema de logging.

    Esta clase define todos los par√°metros relacionados con el registro de eventos
    y actividades del sistema de trading, incluyendo niveles, formatos y rotaci√≥n.

    Caracter√≠sticas principales:
    - Configuraci√≥n de niveles de logging
    - Formato estandarizado de mensajes
    - Rotaci√≥n autom√°tica de archivos de log
    - Gesti√≥n de archivos de backup

    Niveles soportados:
    - DEBUG: Informaci√≥n detallada para debugging
    - INFO: Informaci√≥n general del sistema
    - WARNING: Advertencias importantes
    - ERROR: Errores que no detienen la ejecuci√≥n
    - CRITICAL: Errores cr√≠ticos del sistema

    Ejemplo de uso:
        >>> level = LoggingConfig.LOG_LEVEL
        >>> format_str = LoggingConfig.LOG_FORMAT
        >>> max_size = LoggingConfig.MAX_LOG_SIZE_MB

    Nota:
        Los logs se rotan autom√°ticamente cuando alcanzan el tama√±o m√°ximo,
        manteniendo un n√∫mero espec√≠fico de archivos de backup.
    """

    # üìä Nivel de logging por defecto (INFO para balance entre informaci√≥n y rendimiento)
    LOG_LEVEL: str = "INFO"

    # üéØ Formato de logs con timestamp completo (incluye fecha, hora, m√≥dulo y nivel)
    LOG_FORMAT: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

    # üìÅ Archivo principal de logs del sistema
    LOG_FILE: str = "trading_bot.log"

    # üíæ Tama√±o m√°ximo del archivo de log en MB antes de rotaci√≥n
    MAX_LOG_SIZE_MB: int = 10

    # üîÑ N√∫mero de archivos de backup a mantener durante la rotaci√≥n
    LOG_BACKUP_COUNT: int = 5


# ============================================================================
# üöÄ CONFIGURACI√ìN DE TRADING EN VIVO (LIVE TRADING)
# ============================================================================


class LiveTradingConfig:
    """
    Configuraci√≥n espec√≠fica para operaciones de trading en vivo.

    Esta clase contiene todos los par√°metros necesarios para ejecutar trading
    real con dinero, incluyendo configuraciones de √≥rdenes, timeouts y fees.

    Caracter√≠sticas principales:
    - Balance inicial sincronizado con paper trading
    - Configuraci√≥n de fees din√°micos por perfil
    - Timeouts optimizados para estrategias r√°pidas
    - Configuraci√≥n de reintentos de √≥rdenes
    - Intervalos de verificaci√≥n de √≥rdenes

    Configuraciones de seguridad:
    - Timeouts cortos para estrategias r√°pidas
    - L√≠mite de reintentos para evitar loops
    - Verificaci√≥n frecuente del estado de √≥rdenes

    Ejemplo de uso:
        >>> balance = LiveTradingConfig.INITIAL_BALANCE
        >>> fees = LiveTradingConfig.TRADING_FEES
        >>> timeout = LiveTradingConfig.ORDER_TIMEOUT

    Nota:
        El balance inicial se sincroniza autom√°ticamente con PaperTraderConfig
        para mantener consistencia entre modos de trading.
    """

    # üí∞ Balance inicial real en USD - Sincronizado autom√°ticamente con paper trading
    INITIAL_BALANCE: float = (
        PaperTraderConfig.INITIAL_BALANCE
    )  # Mantiene consistencia autom√°tica

    # üí∏ Comisiones de exchange en % por trade - Configurable v√≠a entorno TRADING_FEES
    # Fallback: perfil actual TradingProfiles["trading_fees"] si existe, sino 0.001 (0.1%)
    TRADING_FEES: float = _get_env_float(
        "TRADING_FEES", TradingProfiles.get_current_profile().get("trading_fees", 0.001)
    )

    # ‚è±Ô∏è Timeout para √≥rdenes en segundos - Optimizado por estrategia
    # Scalping: 15s (ejecuci√≥n r√°pida) - Intraday: 35s (m√°s tolerante)
    ORDER_TIMEOUT: int = 15  # Estrategia r√°pida

    # üîÑ Reintentos m√°ximos para √≥rdenes fallidas - Balanceado por estrategia
    # Scalping: 2 reintentos (r√°pido) - Intraday: 3 reintentos (m√°s persistente)
    MAX_ORDER_RETRIES: int = 2  # Estrategia r√°pida

    # üîç Intervalo de verificaci√≥n de √≥rdenes en segundos - Frecuencia de monitoreo
    # Scalping: 1s (alta frecuencia) - Intraday: 1.8s (frecuencia moderada)
    ORDER_CHECK_INTERVAL: int = 1  # Estrategia r√°pida


# Expone TRADING_FEES a nivel de m√≥dulo para compatibilidad retroactiva
TRADING_FEES: float = LiveTradingConfig.TRADING_FEES

# ============================================================================
# FUNCI√ìN DE UTILIDAD PARA OBTENER CONFIGURACIONES
# ============================================================================


def get_config(config_type: str) -> Any:
    """Obtiene la configuraci√≥n especificada.

    Args:
        config_type: Tipo de configuraci√≥n ('bot', 'risk', 'paper', 'strategy', 'db', 'log', 'live', 'testing', 'indicators')

    Returns:
        Clase de configuraci√≥n correspondiente
    """
    configs = {
        "bot": TradingBotConfig,
        "risk": RiskManagerConfig,
        "paper": PaperTraderConfig,
        "strategy": StrategyConfig,
        "log": LoggingConfig,
        "live": LiveTradingConfig,
        "testing": TestingConfig,
        "indicators": AdvancedIndicatorsConfig,
    }

    if config_type not in configs:
        raise ValueError(
            f"Tipo de configuraci√≥n '{config_type}' no v√°lido. Opciones: {list(configs.keys())}"
        )

    return configs[config_type]


# ============================================================================
# CONFIGURACI√ìN DE INDICADORES AVANZADOS
# ============================================================================


class AdvancedIndicatorsConfig:
    """Configuraci√≥n de per√≠odos y umbrales para indicadores t√©cnicos avanzados."""

    # Per√≠odos para Ichimoku Cloud
    ICHIMOKU_TENKAN_PERIOD: int = 9  # Tenkan-sen (l√≠nea de conversi√≥n)
    ICHIMOKU_KIJUN_PERIOD: int = 26  # Kijun-sen (l√≠nea base)
    ICHIMOKU_SENKOU_PERIOD: int = 52  # Senkou Span A
    ICHIMOKU_SENKOU_B_PERIOD: int = 52  # Senkou Span B
    ICHIMOKU_SHIFT: int = 26  # Desplazamiento para proyecci√≥n

    # Per√≠odos para osciladores
    STOCHASTIC_K_PERIOD: int = 14  # Per√≠odo para %K del Estoc√°stico
    STOCHASTIC_D_PERIOD: int = 3  # Per√≠odo para %D del Estoc√°stico
    WILLIAMS_R_PERIOD: int = 14  # Per√≠odo para Williams %R

    # Umbrales para osciladores
    STOCHASTIC_OVERSOLD: float = 20.0  # Umbral de sobreventa
    STOCHASTIC_OVERBOUGHT: float = 80.0  # Umbral de sobrecompra
    WILLIAMS_R_OVERSOLD: float = -80.0  # Umbral de sobreventa Williams %R
    WILLIAMS_R_OVERBOUGHT: float = -20.0  # Umbral de sobrecompra Williams %R

    # Per√≠odos para otros indicadores
    RSI_PERIOD: int = 14  # Per√≠odo para RSI
    CCI_PERIOD: int = 20  # Per√≠odo para CCI
    BOLLINGER_PERIOD: int = 20  # Per√≠odo para Bandas de Bollinger
    BOLLINGER_STD_DEV: float = 2.0  # Desviaci√≥n est√°ndar para Bollinger
    MFI_PERIOD: int = 14  # Per√≠odo para Money Flow Index
    ATR_PERIOD: int = 14  # Per√≠odo para Average True Range
    ROC_PERIOD: int = 12  # Per√≠odo para Rate of Change

    # Configuraci√≥n para an√°lisis de soporte/resistencia
    SUPPORT_RESISTANCE_WINDOW: int = 20  # Ventana para S/R
    SUPPORT_RESISTANCE_MIN_TOUCHES: int = 2  # M√≠nimo de toques para validar nivel

    # Configuraci√≥n para an√°lisis de volumen
    VOLUME_PROFILE_BINS: int = 20  # N√∫mero de bins para perfil de volumen

    # Configuraci√≥n para Fibonacci
    FIBONACCI_LOOKBACK: int = 50  # Per√≠odo de lookback para Fibonacci

    # Configuraci√≥n para an√°lisis de tendencias
    TREND_ANALYSIS_LOOKBACK: int = 50  # Per√≠odo para an√°lisis de l√≠neas de tendencia
    CHART_PATTERNS_WINDOW: int = 20  # Ventana para detecci√≥n de patrones


# ============================================================================
# CONFIGURACI√ìN DE TESTING
# ============================================================================


class TestingConfig:
    """Configuraci√≥n espec√≠fica para testing y desarrollo."""

    # S√≠mbolos para testing - subset reducido para pruebas r√°pidas
    TEST_SYMBOLS: List[str] = GLOBAL_SYMBOLS[:3]  # Primeros 3 s√≠mbolos

    # Configuraci√≥n de trading bot para testing
    TEST_MIN_CONFIDENCE: float = 70.0
    TEST_MAX_DAILY_TRADES: int = 5

    # Configuraci√≥n de an√°lisis para testing
    TEST_ANALYSIS_INTERVAL: int = 300  # 300 segundos (5 minutos)

    # Balance para testing
    TEST_PAPER_BALANCE: float = 100.0


# ============================================================================
# CONFIGURACI√ìN POR DEFECTO PARA DESARROLLO
# ============================================================================

# Configuraci√≥n r√°pida para desarrollo y testing
DEV_CONFIG = {
    "symbols": TradingBotConfig.SYMBOLS[:3],  # Solo 3 s√≠mbolos para testing
    "analysis_interval": TestingConfig.TEST_ANALYSIS_INTERVAL,  # An√°lisis cada 5 minutos para testing
    "min_confidence": 60.0,  # Umbral m√°s bajo para testing
    "paper_balance": TestingConfig.TEST_PAPER_BALANCE,  # Balance menor para testing
}

# ============================================================================
# üîß CONFIGURACIONES CENTRALIZADAS DE PAR√ÅMETROS HARDCODEADOS
# ============================================================================


class APIConfig:
    """üåê Configuraci√≥n centralizada de APIs y endpoints"""

    # API Configuration (Binance removed - using Capital.com only)

    # Request Configuration
    REQUEST_TIMEOUT = 5  # segundos
    MAX_RETRIES = 3
    RETRY_DELAY = 1  # segundos

    # Sleep intervals para scheduler y error handling
    SCHEDULER_SLEEP_INTERVAL = 2  # segundos (aumentado para evitar rate limiting)
    ERROR_RECOVERY_SLEEP = 10  # segundos (aumentado para mejor recuperaci√≥n)
    LATENCY_SIMULATION_SLEEP = 0.5  # segundos (aumentado para simular latencia real)

    # Data Limits
    DEFAULT_KLINES_LIMIT = 1000
    MAX_KLINES_LIMIT = 1500
    MIN_KLINES_LIMIT = 100

    @classmethod
    def get_request_config(cls) -> dict:
        """Obtener configuraci√≥n de requests"""
        return {
            "timeout": cls.REQUEST_TIMEOUT,
            "max_retries": cls.MAX_RETRIES,
            "retry_delay": cls.RETRY_DELAY,
        }


class CacheConfig:
    """üíæ Configuraci√≥n centralizada de cache"""

    # Cache TTL (Time To Live)
    DEFAULT_TTL = 300  # 5 minutos
    SHORT_TTL = 60  # 1 minuto
    LONG_TTL = 900  # 15 minutos

    # Cache Limits
    MAX_CACHE_ENTRIES = 1000
    CLEANUP_THRESHOLD = 1200

    # Cache Keys
    CACHE_KEY_PREFIXES = {
        "volume_analysis": "vol_",
        "trend_analysis": "trend_",
        "confluence": "conf_",
        "market_regime": "regime_",
    }

    @classmethod
    def get_ttl_for_operation(cls, operation_type: str) -> int:
        """Obtener TTL seg√∫n tipo de operaci√≥n"""
        ttl_map = {
            "price_data": cls.SHORT_TTL,
            "technical_analysis": cls.DEFAULT_TTL,
            "market_structure": cls.LONG_TTL,
        }
        return ttl_map.get(operation_type, cls.DEFAULT_TTL)


class TechnicalAnalysisConfig:
    """üìä Configuraci√≥n centralizada de an√°lisis t√©cnico"""

    # Per√≠odos de Rolling Windows
    VOLUME_PERIODS = {"short": 10, "medium": 20, "long": 50}

    # Per√≠odos EMA
    EMA_PERIODS = {"fast": 20, "slow": 50, "trend": 200}

    # Umbrales de Volumen
    VOLUME_THRESHOLDS = {
        "very_strong": 2.5,
        "strong": 1.8,
        "moderate": 1.3,
        "weak": 1.0,
    }

    # Umbrales ADX
    ADX_THRESHOLDS = {"strong_trend": 25, "weak_trend": 20, "no_trend": 15}

    # Desviaciones y Tolerancias
    VWAP_DEVIATION_THRESHOLD = 0.02  # 2%
    VOLATILITY_RATIO_THRESHOLD = 1.5
    PRICE_RANGE_TOLERANCE = 0.2  # 20%

    # Factores de Aproximaci√≥n
    APPROXIMATION_FACTORS = {
        "close": 0.98,
        "exact": 1.00,
        "far": 1.02,
        "very_close": 0.99,
    }

    @classmethod
    def get_volume_strength(cls, ratio: float) -> str:
        """Determinar fuerza del volumen basado en ratio"""
        if ratio >= cls.VOLUME_THRESHOLDS["very_strong"]:
            return "VERY_STRONG"
        elif ratio >= cls.VOLUME_THRESHOLDS["strong"]:
            return "STRONG"
        elif ratio >= cls.VOLUME_THRESHOLDS["moderate"]:
            return "MODERATE"
        else:
            return "WEAK"


class ConfluenceConfig:
    """üéØ Configuraci√≥n centralizada de confluencia"""

    # Pesos de Componentes
    COMPONENT_WEIGHTS = {
        "technical": 0.4,
        "volume": 0.25,
        "structure": 0.2,
        "momentum": 0.15,
    }

    # Umbrales de Confluencia
    CONFLUENCE_THRESHOLDS = {
        "very_strong": 0.8,
        "strong": 0.65,
        "moderate": 0.45,
        "weak": 0.0,
    }

    # Pesos de Indicadores T√©cnicos
    TECHNICAL_WEIGHTS = {"rsi": 0.4, "bollinger_bands": 0.3, "vwap": 0.3}

    # Pesos de An√°lisis de Volumen
    VOLUME_WEIGHTS = {"strength": 0.5, "confirmation": 0.3, "trend_bonus": 0.2}

    # Pesos de Estructura de Mercado
    STRUCTURE_WEIGHTS = {"support_resistance": 0.6, "trend_lines": 0.4}

    # Pesos de Momentum
    MOMENTUM_WEIGHTS = {"roc": 0.5, "mfi": 0.5}

    @classmethod
    def get_confluence_level(cls, score: float) -> str:
        """Determinar nivel de confluencia basado en score"""
        if score >= cls.CONFLUENCE_THRESHOLDS["very_strong"]:
            return "VERY_STRONG"
        elif score >= cls.CONFLUENCE_THRESHOLDS["strong"]:
            return "STRONG"
        elif score >= cls.CONFLUENCE_THRESHOLDS["moderate"]:
            return "MODERATE"
        else:
            return "WEAK"


class MonitoringConfig:
    """üîç Configuraci√≥n centralizada de monitoreo"""

    # Intervalos de Tiempo
    DEFAULT_HOURS_BACK = 24
    ANALYSIS_INTERVALS = {
        "short": 1,  # 1 hora
        "medium": 6,  # 6 horas
        "long": 24,  # 24 horas
        "extended": 72,  # 72 horas
    }

    # Intervalos de Actualizaci√≥n
    UPDATE_INTERVALS = {
        "live_bot": 30,  # 30 segundos
        "monitoring": 60,  # 1 minuto
        "analysis": 300,  # 5 minutos
        "reporting": 900,  # 15 minutos
    }

    # L√≠mites de Datos
    DATA_LIMITS = {
        "max_missed_executions": 100,
        "max_log_entries": 1000,
        "max_history_days": 30,
    }

    @classmethod
    def get_analysis_hours(cls, analysis_type: str) -> int:
        """Obtener horas de an√°lisis seg√∫n tipo"""
        return cls.ANALYSIS_INTERVALS.get(analysis_type, cls.DEFAULT_HOURS_BACK)

    @classmethod
    def get_update_interval(cls, component: str) -> int:
        """Obtener intervalo de actualizaci√≥n seg√∫n componente"""
        return cls.UPDATE_INTERVALS.get(component, 60)


class FibonacciConfig:
    """üìê Configuraci√≥n centralizada de niveles de Fibonacci"""

    # Niveles de Retroceso de Fibonacci
    RETRACEMENT_LEVELS = [0.236, 0.382, 0.500, 0.618, 0.786]

    # Niveles de Extensi√≥n de Fibonacci
    EXTENSION_LEVELS = [1.272, 1.414, 1.618, 2.000, 2.618]

    # Tolerancias para Niveles
    LEVEL_TOLERANCES = {
        "tight": 0.005,  # 0.5%
        "normal": 0.01,  # 1%
        "loose": 0.02,  # 2%
    }

    @classmethod
    def get_retracement_levels(cls) -> list:
        """Obtener niveles de retroceso"""
        return cls.RETRACEMENT_LEVELS.copy()

    @classmethod
    def get_extension_levels(cls) -> list:
        """Obtener niveles de extensi√≥n"""
        return cls.EXTENSION_LEVELS.copy()


class OscillatorConfig:
    """üìà Configuraci√≥n centralizada de osciladores"""

    # Umbrales RSI
    RSI_THRESHOLDS = {
        "oversold_extreme": 20,
        "oversold": 30,
        "neutral_low": 40,
        "neutral_high": 60,
        "overbought": 70,
        "overbought_extreme": 80,
    }

    # Umbrales Williams %R
    WILLIAMS_R_THRESHOLDS = {"oversold": -80, "overbought": -20}

    # Umbrales Stochastic
    STOCHASTIC_THRESHOLDS = {"oversold": 20, "overbought": 80}

    # Umbrales de Se√±ales
    SIGNAL_THRESHOLDS = {
        "strong_buy": -100,
        "buy": -50,
        "neutral": 0,
        "sell": 50,
        "strong_sell": 100,
    }

    @classmethod
    def get_rsi_condition(cls, rsi_value: float) -> str:
        """Determinar condici√≥n RSI"""
        if rsi_value <= cls.RSI_THRESHOLDS["oversold_extreme"]:
            return "OVERSOLD_EXTREME"
        elif rsi_value <= cls.RSI_THRESHOLDS["oversold"]:
            return "OVERSOLD"
        elif rsi_value >= cls.RSI_THRESHOLDS["overbought_extreme"]:
            return "OVERBOUGHT_EXTREME"
        elif rsi_value >= cls.RSI_THRESHOLDS["overbought"]:
            return "OVERBOUGHT"
        else:
            return "NEUTRAL"


class CalculationConfig:
    """üßÆ Configuraci√≥n centralizada de constantes de c√°lculo"""

    # Constantes Matem√°ticas
    PARABOLIC_SAR_STEP = 0.015
    PARABOLIC_SAR_MAX = 0.2

    # Per√≠odos de C√°lculo
    DEFAULT_PERIODS = {"short": 5, "medium": 14, "long": 34, "very_long": 55}

    # Factores de Suavizado
    SMOOTHING_FACTORS = {"alpha": 2.0, "beta": 0.5, "gamma": 0.1}

    # Multiplicadores Est√°ndar
    STANDARD_MULTIPLIERS = {
        "bollinger_std": 2.0,
        "atr_multiplier": 1.5,
        "volume_multiplier": 1.2,
    }

    @classmethod
    def get_period(cls, period_type: str) -> int:
        """Obtener per√≠odo seg√∫n tipo"""
        return cls.DEFAULT_PERIODS.get(period_type, 14)


# ============================================================================
# VALIDACI√ìN DE CONFIGURACI√ìN
# ============================================================================


class ConfigValidator:
    """Validador de par√°metros de configuraci√≥n para asegurar valores v√°lidos."""

    # Rangos v√°lidos para par√°metros cr√≠ticos
    VALID_RANGES = {
        "max_position_size": (0.01, 1.0),
        "max_total_exposure": (0.1, 1.0),
        "min_trade_value": (1.0, 1000.0),
        "max_slippage": (0.001, 0.1),
        "stop_loss_percentage": (0.01, 0.5),
        "take_profit_percentage": (0.01, 1.0),
        "trailing_stop_activation": (0.006, 0.5),
        "trailing_stop_distance": (0.005, 0.2),
        "max_drawdown_threshold": (0.05, 0.5),
        "min_confidence_score": (30, 95),
        "analysis_interval": (1, 3600),
        "position_check_interval": (10, 300),
        "connection_timeout": (5, 120),
        "max_retries": (1, 10),
        "retry_delay": (0.5, 30.0),
        "max_consecutive_losses": (1, 20),
    }

    @classmethod
    def validate_profile(cls, profile_name: str, profile_config: dict) -> bool:
        """Validar que un perfil tenga par√°metros en rangos v√°lidos."""
        errors = []

        for param, value in profile_config.items():
            if param in cls.VALID_RANGES:
                min_val, max_val = cls.VALID_RANGES[param]
                if not (min_val <= value <= max_val):
                    errors.append(
                        f"Perfil '{profile_name}': {param}={value} fuera del rango v√°lido [{min_val}, {max_val}]"
                    )

        if errors:
            logger.error(f"Errores de validaci√≥n en perfil '{profile_name}':")
            for error in errors:
                logger.error(f"  - {error}")
            return False

        logger.info(f"Perfil '{profile_name}' validado correctamente")
        return True

    @classmethod
    def validate_all_profiles(cls) -> bool:
        """Validar todos los perfiles de trading."""
        all_valid = True

        for profile_name, profile_config in TradingProfiles.PROFILES.items():
            if not cls.validate_profile(profile_name, profile_config):
                all_valid = False

        return all_valid

    @classmethod
    def get_safe_value(
        cls, param_name: str, value: float, default: float = None
    ) -> float:
        """Obtener un valor seguro dentro del rango v√°lido."""
        if param_name not in cls.VALID_RANGES:
            return value


# ============================================================================
# INICIALIZACI√ìN Y VALIDACI√ìN AUTOM√ÅTICA
# ============================================================================


def initialize_config() -> bool:
    """Inicializar y validar toda la configuraci√≥n del sistema."""
    logger.info("Inicializando configuraci√≥n del sistema de trading...")

    # Validar todos los perfiles
    if not ConfigValidator.validate_all_profiles():
        logger.error("Fall√≥ la validaci√≥n de perfiles. Revise la configuraci√≥n.")
        return False

    # Validar perfil actual mediante getters
    try:
        current_profile = TradingProfiles.get_current_profile()
    except ValueError:
        logger.error(
            f"Perfil actual no existe. Perfiles disponibles: {list(TradingProfiles.PROFILES.keys())}"
        )
        return False

    # Mostrar configuraci√≥n actual
    profile_name = current_profile.get("name", "DESCONOCIDO")
    logger.info(f"Perfil activo: {profile_name}")
    logger.info(f"Timeframes: {current_profile['timeframes']}")
    logger.info(f"Intervalo de an√°lisis: {current_profile['analysis_interval']} min")
    logger.info(f"Confianza m√≠nima: {current_profile['min_confidence']}%")

    logger.info("‚úÖ Configuraci√≥n inicializada correctamente")
    return True


# ============================================================================
# üîÑ FUNCIONES UTILITARIAS PARA S√çMBOLOS
# ============================================================================
# Las funciones de conversi√≥n fueron eliminadas porque GLOBAL_SYMBOLS
# ya contiene los nombres exactos de Capital.com


def get_all_capital_symbols() -> List[str]:
    """
    Obtiene todos los s√≠mbolos (ya est√°n en formato Capital.com)

    Returns:
        Lista de s√≠mbolos de Capital.com
    """
    return GLOBAL_SYMBOLS.copy()


def validate_symbol_mapping() -> bool:
    """
    Valida que GLOBAL_SYMBOLS contenga s√≠mbolos v√°lidos

    Returns:
        True si los s√≠mbolos son v√°lidos
    """
    if not GLOBAL_SYMBOLS:
        logger.warning("‚ö†Ô∏è GLOBAL_SYMBOLS est√° vac√≠o")
        return False

    logger.info(f"‚úÖ GLOBAL_SYMBOLS configurado con {len(GLOBAL_SYMBOLS)} s√≠mbolos")
    return True


# Validar configuraci√≥n al importar el m√≥dulo
try:
    if not initialize_config():
        logger.warning("‚ö†Ô∏è Configuraci√≥n inicializada con advertencias")

    # Validar mapeo de s√≠mbolos
    validate_symbol_mapping()

except Exception as e:
    logger.error(f"‚ùå Error al inicializar configuraci√≥n: {e}")
