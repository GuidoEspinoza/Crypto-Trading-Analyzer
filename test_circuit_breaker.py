#!/usr/bin/env python3
"""
üß™ Script de prueba para el mecanismo Circuit Breaker

Este script simula diferentes escenarios para verificar que el circuit breaker
funciona correctamente al detectar p√©rdidas consecutivas.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from datetime import datetime, timedelta
from backend.trading_engine.trading_bot import TradingBot
from backend.trading_engine.config import TradingBotConfig

def test_circuit_breaker_scenarios():
    """
    üî¨ Probar diferentes escenarios del circuit breaker
    """
    print("\nüß™ INICIANDO PRUEBAS DEL CIRCUIT BREAKER")
    print("=" * 50)
    
    # Crear bot con configuraci√≥n actual
    bot = TradingBot()
    
    print(f"\nüìä Configuraci√≥n actual:")
    print(f"   ‚Ä¢ Perfil: {bot.config.get_bot_description()}")
    print(f"   ‚Ä¢ P√©rdidas m√°ximas consecutivas: {bot.max_consecutive_losses}")
    print(f"   ‚Ä¢ Cooldown: {bot.circuit_breaker_cooldown_hours} horas")
    
    # Escenario 1: Simular p√©rdidas consecutivas hasta activar circuit breaker
    print("\nüî¥ ESCENARIO 1: P√©rdidas consecutivas hasta activaci√≥n")
    print("-" * 40)
    
    for i in range(bot.max_consecutive_losses + 2):
        print(f"\n   Trade #{i+1}: Simulando p√©rdida...")
        bot._update_consecutive_losses(trade_was_profitable=False)
        
        print(f"   ‚Ä¢ P√©rdidas consecutivas: {bot.consecutive_losses}/{bot.max_consecutive_losses}")
        print(f"   ‚Ä¢ Circuit breaker activo: {bot.circuit_breaker_active}")
        
        if bot.circuit_breaker_active:
            remaining = bot._get_remaining_cooldown_hours()
            print(f"   ‚Ä¢ ‚è∞ Tiempo restante de cooldown: {remaining:.2f} horas")
            break
    
    # Escenario 2: Verificar que el circuit breaker bloquea nuevas operaciones
    print("\nüõë ESCENARIO 2: Verificaci√≥n de bloqueo de operaciones")
    print("-" * 40)
    
    can_trade = not bot._check_circuit_breaker()
    print(f"   ‚Ä¢ ¬øPuede operar? {can_trade}")
    print(f"   ‚Ä¢ Estado del circuit breaker: {'ACTIVO' if bot.circuit_breaker_active else 'INACTIVO'}")
    
    # Escenario 3: Simular reactivaci√≥n despu√©s del cooldown
    print("\nüü¢ ESCENARIO 3: Simulaci√≥n de reactivaci√≥n post-cooldown")
    print("-" * 40)
    
    # Simular que ha pasado el tiempo de cooldown
    if bot.circuit_breaker_activated_at:
        bot.circuit_breaker_activated_at = datetime.now() - timedelta(hours=bot.circuit_breaker_cooldown_hours + 1)
        print(f"   ‚Ä¢ Simulando que han pasado {bot.circuit_breaker_cooldown_hours + 1} horas...")
        
        # Verificar circuit breaker
        can_trade_after_cooldown = not bot._check_circuit_breaker()
        print(f"   ‚Ä¢ ¬øPuede operar despu√©s del cooldown? {can_trade_after_cooldown}")
        print(f"   ‚Ä¢ Estado del circuit breaker: {'ACTIVO' if bot.circuit_breaker_active else 'INACTIVO'}")
        print(f"   ‚Ä¢ P√©rdidas consecutivas reseteadas: {bot.consecutive_losses}")
    
    # Escenario 4: Probar con trade rentable (reset de p√©rdidas)
    print("\nüí∞ ESCENARIO 4: Trade rentable (reset de contador)")
    print("-" * 40)
    
    # Simular algunas p√©rdidas
    for i in range(3):
        bot._update_consecutive_losses(trade_was_profitable=False)
    
    print(f"   ‚Ä¢ P√©rdidas antes del trade rentable: {bot.consecutive_losses}")
    
    # Simular trade rentable
    bot._update_consecutive_losses(trade_was_profitable=True)
    print(f"   ‚Ä¢ P√©rdidas despu√©s del trade rentable: {bot.consecutive_losses}")
    print(f"   ‚Ä¢ ‚úÖ Contador reseteado correctamente")
    
    # Escenario 5: Informaci√≥n del perfil actual
    print("\n‚öôÔ∏è ESCENARIO 5: Informaci√≥n del perfil actual")
    print("-" * 40)
    
    print(f"   ‚Ä¢ Perfil activo: {bot.config.get_bot_description()}")
    print(f"   ‚Ä¢ P√©rdidas m√°ximas: {bot.max_consecutive_losses}")
    print(f"   ‚Ä¢ Cooldown: {bot.circuit_breaker_cooldown_hours} horas")
    print(f"   ‚Ä¢ Trades diarios m√°ximos: {bot.max_daily_trades}")
    print(f"   ‚Ä¢ Umbral de confianza: {bot.min_confidence_threshold}%")
    
    print("\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS")
    print("=" * 50)
    
    return True

def test_status_and_reports():
    """
    üìä Probar que el circuit breaker aparece en status y reportes
    """
    print("\nüìä PROBANDO STATUS Y REPORTES")
    print("=" * 30)
    
    bot = TradingBot()
    
    # Activar circuit breaker
    for i in range(bot.max_consecutive_losses):
        bot._update_consecutive_losses(trade_was_profitable=False)
    
    # Obtener status
    status = bot.get_status()
    print(f"\nüîç Status del bot:")
    if hasattr(status, 'circuit_breaker_info'):
        cb_info = status.circuit_breaker_info
        print(f"   ‚Ä¢ Circuit breaker activo: {cb_info.get('active', 'N/A')}")
        print(f"   ‚Ä¢ P√©rdidas consecutivas: {cb_info.get('consecutive_losses', 'N/A')}")
        print(f"   ‚Ä¢ L√≠mite m√°ximo: {cb_info.get('max_consecutive_losses', 'N/A')}")
    
    # Obtener reporte detallado
    report = bot.get_detailed_report()
    print(f"\nüìã Reporte detallado:")
    if 'risk_management' in report and 'circuit_breaker' in report['risk_management']:
        cb_report = report['risk_management']['circuit_breaker']
        print(f"   ‚Ä¢ Estado: {cb_report.get('active', 'N/A')}")
        print(f"   ‚Ä¢ P√©rdidas: {cb_report.get('consecutive_losses', 'N/A')}/{cb_report.get('max_consecutive_losses', 'N/A')}")
        print(f"   ‚Ä¢ Cooldown restante: {cb_report.get('remaining_cooldown_hours', 'N/A')}h")
    
    print("\n‚úÖ STATUS Y REPORTES VERIFICADOS")
    return True

if __name__ == "__main__":
    try:
        # Ejecutar todas las pruebas
        test_circuit_breaker_scenarios()
        test_status_and_reports()
        
        print("\nüéâ TODAS LAS PRUEBAS DEL CIRCUIT BREAKER EXITOSAS")
        print("\nüí° El mecanismo est√° listo para proteger tu capital!")
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)