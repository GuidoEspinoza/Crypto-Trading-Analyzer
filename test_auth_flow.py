#!/usr/bin/env python3
"""
Script de prueba para verificar el nuevo flujo de autenticaci√≥n seguro
que usa encryptedPassword y actualiza autom√°ticamente los tokens en .env
"""

import os
import sys
import logging
from pathlib import Path

# A√±adir el directorio ra√≠z al path para importaciones absolutas
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.core.capital_client import create_capital_client_from_env

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_auth_flow():
    """Prueba el nuevo flujo de autenticaci√≥n"""
    print("üîê Probando el nuevo flujo de autenticaci√≥n seguro...")
    print("=" * 60)
    
    try:
        # Verificar que encryptedPassword est√© en null inicialmente
        env_file = Path(".env")
        if env_file.exists():
            with open(env_file, 'r') as f:
                content = f.read()
                if "encryptedPassword=null" in content:
                    print("‚úÖ encryptedPassword est√° configurado como null (se generar√° din√°micamente)")
                else:
                    print("‚ö†Ô∏è  encryptedPassword no est√° en null, pero se regenerar√° si es necesario")
        
        # Crear cliente desde variables de entorno
        print("\nüì° Creando cliente Capital.com...")
        client = create_capital_client_from_env()
        
        # Intentar crear sesi√≥n (esto deber√≠a generar encryptedPassword autom√°ticamente)
        print("\nüîë Creando sesi√≥n con encryptedPassword...")
        session_result = client.create_session()
        
        if session_result.get("success"):
            print("‚úÖ Sesi√≥n creada exitosamente!")
            print(f"   - CST Token: {session_result.get('cst_token', 'N/A')[:20]}...")
            print(f"   - Security Token: {session_result.get('security_token', 'N/A')[:20]}...")
            print(f"   - Trailing Stops: {'‚úÖ Habilitado' if session_result.get('trailing_stops_enabled') else '‚ùå Deshabilitado'}")
            
            # Verificar que los tokens se hayan actualizado en .env
            print("\nüîç Verificando actualizaci√≥n de tokens en .env...")
            if env_file.exists():
                with open(env_file, 'r') as f:
                    updated_content = f.read()
                    
                if "CST=" in updated_content and "X-SECURITY-TOKEN=" in updated_content:
                    print("‚úÖ Tokens actualizados correctamente en .env")
                else:
                    print("‚ö†Ô∏è  Los tokens no se encontraron en .env")
                    
                if "encryptedPassword=" in updated_content and "encryptedPassword=null" not in updated_content:
                    print("‚úÖ encryptedPassword generado y almacenado en .env")
                else:
                    print("‚ö†Ô∏è  encryptedPassword no se gener√≥ correctamente")
            
            # Probar una operaci√≥n b√°sica
            print("\nüè• Probando operaci√≥n b√°sica (ping)...")
            ping_result = client.ping()
            if ping_result.get("success"):
                print("‚úÖ Ping exitoso - la sesi√≥n est√° funcionando correctamente")
            else:
                print("‚ùå Ping fall√≥:", ping_result.get("error", "Error desconocido"))
            
            # Cerrar sesi√≥n
            print("\nüîí Cerrando sesi√≥n...")
            close_result = client.close_session()
            if close_result.get("success"):
                print("‚úÖ Sesi√≥n cerrada correctamente")
            else:
                print("‚ö†Ô∏è  Error al cerrar sesi√≥n:", close_result.get("error", "Error desconocido"))
                
        else:
            print("‚ùå Error al crear sesi√≥n:", session_result.get("error", "Error desconocido"))
            return False
            
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {str(e)}")
        logger.exception("Error detallado:")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ Prueba del flujo de autenticaci√≥n completada!")
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando prueba del nuevo flujo de autenticaci√≥n seguro")
    print("Este script verificar√°:")
    print("  1. Generaci√≥n autom√°tica de encryptedPassword")
    print("  2. Autenticaci√≥n usando encryptedPassword")
    print("  3. Actualizaci√≥n autom√°tica de tokens en .env")
    print("  4. Funcionamiento b√°sico de la sesi√≥n")
    print()
    
    success = test_auth_flow()
    
    if success:
        print("‚úÖ Todas las pruebas pasaron exitosamente!")
        sys.exit(0)
    else:
        print("‚ùå Algunas pruebas fallaron. Revisa los logs para m√°s detalles.")
        sys.exit(1)

if __name__ == "__main__":
    main()