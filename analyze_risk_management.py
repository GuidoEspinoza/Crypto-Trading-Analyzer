#!/usr/bin/env python3
"""üõ°Ô∏è An√°lisis Completo de Gesti√≥n de Riesgo y Tama√±o de Posiciones

Este script analiza en detalle la gesti√≥n de riesgo implementada
y valida que los c√°lculos de tama√±o de posiciones sean correctos.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config.main_config import TradingProfiles, TradingBotConfig
from src.core.enhanced_risk_manager import EnhancedRiskManager, PositionSizing, RiskLevel
from src.core.enhanced_strategies import EnhancedSignal
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_scalping_risk_configuration():
    """üîç Analizar configuraci√≥n de riesgo para scalping"""
    print("üõ°Ô∏è AN√ÅLISIS DE CONFIGURACI√ìN DE RIESGO - SCALPING")
    print("=" * 80)
    
    scalping_config = TradingProfiles.PROFILES["SCALPING"]
    
    print("üìä PAR√ÅMETROS DE RIESGO PRINCIPALES:")
    print(f"   ‚Ä¢ max_positions: {scalping_config['max_positions']} posiciones simult√°neas")
    print(f"   ‚Ä¢ max_risk_per_trade: {scalping_config['max_risk_per_trade']}% por operaci√≥n")
    print(f"   ‚Ä¢ max_position_size: {scalping_config['max_position_size']*100:.1f}% del balance por posici√≥n")
    print(f"   ‚Ä¢ max_total_exposure: {scalping_config['max_total_exposure']*100:.1f}% exposici√≥n total")
    print(f"   ‚Ä¢ max_daily_trades: {scalping_config['max_daily_trades']} trades por d√≠a")
    print(f"   ‚Ä¢ max_daily_risk: {scalping_config['max_daily_risk']}% riesgo diario m√°ximo")
    print()
    
    print("üéØ STOP LOSS Y TAKE PROFIT:")
    print(f"   ‚Ä¢ SL m√≠nimo: {scalping_config['sl_min_percentage']*100:.1f}%")
    print(f"   ‚Ä¢ SL m√°ximo: {scalping_config['sl_max_percentage']*100:.1f}%")
    print(f"   ‚Ä¢ TP m√≠nimo: {scalping_config['tp_min_percentage']*100:.1f}%")
    print(f"   ‚Ä¢ TP m√°ximo: {scalping_config['tp_max_percentage']*100:.1f}%")
    print(f"   ‚Ä¢ Ratio R:R promedio: {scalping_config['tp_min_percentage']/scalping_config['sl_min_percentage']:.1f}:1")
    print()
    
    print("üîß PAR√ÅMETROS ATR Y TRAILING:")
    print(f"   ‚Ä¢ ATR multiplicador m√≠n: {scalping_config['atr_multiplier_min']}x")
    print(f"   ‚Ä¢ ATR multiplicador m√°x: {scalping_config['atr_multiplier_max']}x")
    print(f"   ‚Ä¢ Trailing stop activaci√≥n: {scalping_config['trailing_stop_activation']*100:.1f}%")
    print(f"   ‚Ä¢ Breakeven threshold: {scalping_config['breakeven_threshold']*100:.1f}%")
    print()
    
    # Calcular riesgo m√°ximo te√≥rico
    max_theoretical_risk = scalping_config['max_positions'] * scalping_config['max_risk_per_trade']
    max_exposure_risk = scalping_config['max_total_exposure'] * 100
    
    print("‚ö†Ô∏è AN√ÅLISIS DE RIESGO M√ÅXIMO:")
    print(f"   ‚Ä¢ Riesgo te√≥rico m√°ximo: {max_theoretical_risk:.1f}% ({scalping_config['max_positions']} √ó {scalping_config['max_risk_per_trade']}%)")
    print(f"   ‚Ä¢ Exposici√≥n m√°xima: {max_exposure_risk:.1f}%")
    print(f"   ‚Ä¢ Riesgo diario l√≠mite: {scalping_config['max_daily_risk']}%")
    print()
    
    # Validaciones
    print("‚úÖ VALIDACIONES DE SEGURIDAD:")
    
    # 1. Riesgo por trade vs exposici√≥n
    if scalping_config['max_risk_per_trade'] <= 1.0:
        print("   ‚úÖ Riesgo por trade ‚â§ 1.0% (SEGURO)")
    else:
        print("   ‚ö†Ô∏è Riesgo por trade > 1.0% (REVISAR)")
    
    # 2. N√∫mero de posiciones
    if scalping_config['max_positions'] <= 5:
        print("   ‚úÖ M√°ximo posiciones ‚â§ 5 (CONTROLADO)")
    else:
        print("   ‚ö†Ô∏è M√°ximo posiciones > 5 (REVISAR)")
    
    # 3. Exposici√≥n total
    if scalping_config['max_total_exposure'] <= 0.5:
        print("   ‚úÖ Exposici√≥n total ‚â§ 50% (CONSERVADOR)")
    else:
        print("   ‚ö†Ô∏è Exposici√≥n total > 50% (AGRESIVO)")
    
    # 4. Ratio R:R
    rr_ratio = scalping_config['tp_min_percentage'] / scalping_config['sl_min_percentage']
    if rr_ratio >= 1.2:
        print(f"   ‚úÖ Ratio R:R {rr_ratio:.1f}:1 ‚â• 1.2:1 (FAVORABLE)")
    else:
        print(f"   ‚ö†Ô∏è Ratio R:R {rr_ratio:.1f}:1 < 1.2:1 (REVISAR)")
    
    print()
    return True

def simulate_position_sizing_scenarios():
    """üé≠ Simular diferentes escenarios de c√°lculo de tama√±o de posiciones"""
    print("üé≠ SIMULACI√ìN DE C√ÅLCULO DE TAMA√ëO DE POSICIONES")
    print("=" * 80)
    
    try:
        # Configurar perfil de scalping
        TradingBotConfig.TRADING_PROFILE = "SCALPING"
        
        # Crear risk manager
        risk_manager = EnhancedRiskManager()
        
        # Escenarios de prueba
        test_scenarios = [
            {
                "name": "Bitcoin - Precio Alto",
                "symbol": "BTCUSD",
                "price": 45000.0,
                "confidence": 80.0
            },
            {
                "name": "Ethereum - Precio Medio",
                "symbol": "ETHUSD", 
                "price": 2500.0,
                "confidence": 75.0
            },
            {
                "name": "US500 - √çndice",
                "symbol": "US500",
                "price": 4500.0,
                "confidence": 85.0
            },
            {
                "name": "Gold - Metal Precioso",
                "symbol": "GOLD",
                "price": 2000.0,
                "confidence": 78.0
            }
        ]
        
        print(f"üìä Balance de prueba: ${risk_manager.portfolio_value:,.2f}")
        print(f"üéØ Max position size: {risk_manager.max_position_size*100:.1f}% del balance")
        print()
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"üß™ ESCENARIO {i}: {scenario['name']}")
            print("-" * 50)
            
            # Crear se√±al de prueba
            signal = EnhancedSignal(
                symbol=scenario['symbol'],
                signal_type="BUY",
                confidence=scenario['confidence'],
                price=scenario['price'],
                timeframe="5m",
                strategy_name="RSI_STRATEGY",
                timestamp=None,
                indicators={},
                market_conditions={},
                risk_metrics={}
            )
            
            # Calcular tama√±o de posici√≥n
            market_risk = {"volatility": 0.02, "liquidity": 1.0}
            position_sizing = risk_manager._calculate_position_sizing(signal, market_risk)
            
            print(f"   üí∞ Precio: ${scenario['price']:,.2f}")
            print(f"   üìè Tama√±o recomendado: {position_sizing.recommended_size:.6f} unidades")
            print(f"   üíµ Valor de posici√≥n: ${position_sizing.position_value:,.2f}")
            print(f"   üéØ Riesgo por trade: ${position_sizing.risk_per_trade:,.2f}")
            print(f"   üìä Apalancamiento: {position_sizing.leverage_used:.1f}x")
            print(f"   ‚ö†Ô∏è Nivel de riesgo: {position_sizing.risk_level.value}")
            print(f"   üìù Reasoning: {position_sizing.reasoning}")
            print()
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n: {e}")
        return False

def analyze_risk_levels_distribution():
    """üìà Analizar distribuci√≥n de niveles de riesgo"""
    print("üìà AN√ÅLISIS DE DISTRIBUCI√ìN DE NIVELES DE RIESGO")
    print("=" * 80)
    
    # Configuraci√≥n actual
    scalping_config = TradingProfiles.PROFILES["SCALPING"]
    max_position_size = scalping_config['max_position_size']
    
    print("üéØ UMBRALES DE NIVEL DE RIESGO:")
    print(f"   ‚Ä¢ VERY_LOW: ‚â§ 5% del portfolio ({max_position_size*100:.1f}% configurado)")
    print(f"   ‚Ä¢ LOW: 5.1% - 10% del portfolio")
    print(f"   ‚Ä¢ MODERATE: 10.1% - 15% del portfolio")
    print(f"   ‚Ä¢ HIGH: 15.1% - 20% del portfolio")
    print(f"   ‚Ä¢ VERY_HIGH: > 20% del portfolio")
    print()
    
    # Determinar nivel actual
    current_risk_pct = max_position_size * 100
    if current_risk_pct <= 5:
        current_level = "VERY_LOW"
        status = "‚úÖ MUY SEGURO"
    elif current_risk_pct <= 10:
        current_level = "LOW"
        status = "‚úÖ SEGURO"
    elif current_risk_pct <= 15:
        current_level = "MODERATE"
        status = "‚ö†Ô∏è MODERADO"
    elif current_risk_pct <= 20:
        current_level = "HIGH"
        status = "‚ö†Ô∏è ALTO"
    else:
        current_level = "VERY_HIGH"
        status = "‚ùå MUY ALTO"
    
    print(f"üìä CONFIGURACI√ìN ACTUAL:")
    print(f"   ‚Ä¢ Porcentaje por posici√≥n: {current_risk_pct:.1f}%")
    print(f"   ‚Ä¢ Nivel de riesgo: {current_level}")
    print(f"   ‚Ä¢ Estado: {status}")
    print()
    
    # Recomendaciones
    print("üí° RECOMENDACIONES:")
    if current_risk_pct <= 6:
        print("   ‚úÖ Configuraci√≥n √≥ptima para scalping conservador")
        print("   ‚úÖ Permite m√∫ltiples posiciones sin riesgo excesivo")
    elif current_risk_pct <= 10:
        print("   ‚úÖ Configuraci√≥n aceptable para scalping")
        print("   ‚ö†Ô∏è Monitorear exposici√≥n total con m√∫ltiples posiciones")
    else:
        print("   ‚ö†Ô∏è Considerar reducir max_position_size para scalping")
        print("   ‚ö†Ô∏è Riesgo alto con m√∫ltiples posiciones simult√°neas")
    
    print()
    return True

def validate_risk_calculations():
    """üßÆ Validar c√°lculos de riesgo matem√°ticamente"""
    print("üßÆ VALIDACI√ìN MATEM√ÅTICA DE C√ÅLCULOS DE RIESGO")
    print("=" * 80)
    
    # Par√°metros de prueba
    balance = 1000.0
    max_position_size = 0.06  # 6%
    leverage = 2.0
    price = 50000.0  # Bitcoin ejemplo
    
    print("üìä PAR√ÅMETROS DE PRUEBA:")
    print(f"   ‚Ä¢ Balance: ${balance:,.2f}")
    print(f"   ‚Ä¢ Max position size: {max_position_size*100:.1f}%")
    print(f"   ‚Ä¢ Leverage: {leverage:.1f}x")
    print(f"   ‚Ä¢ Precio del activo: ${price:,.2f}")
    print()
    
    print("üßÆ C√ÅLCULOS PASO A PASO:")
    
    # Paso 1: Monto de operaci√≥n
    monto_operacion = balance * max_position_size
    print(f"   1. Monto operaci√≥n = ${balance:,.2f} √ó {max_position_size:.2f} = ${monto_operacion:.2f}")
    
    # Paso 2: Valor de negociaci√≥n
    valor_negociacion = monto_operacion * leverage
    print(f"   2. Valor negociaci√≥n = ${monto_operacion:.2f} √ó {leverage:.1f}x = ${valor_negociacion:.2f}")
    
    # Paso 3: Tama√±o de posici√≥n
    tamano_posicion = valor_negociacion / price
    print(f"   3. Tama√±o posici√≥n = ${valor_negociacion:.2f} √∑ ${price:,.2f} = {tamano_posicion:.6f} unidades")
    
    # Paso 4: Verificaci√≥n
    valor_verificacion = tamano_posicion * price
    print(f"   4. Verificaci√≥n = {tamano_posicion:.6f} √ó ${price:,.2f} = ${valor_verificacion:.2f}")
    
    # Paso 5: Margen requerido
    margen_requerido = valor_verificacion / leverage
    print(f"   5. Margen requerido = ${valor_verificacion:.2f} √∑ {leverage:.1f}x = ${margen_requerido:.2f}")
    
    print()
    print("‚úÖ VALIDACIONES:")
    
    # Validar que el margen requerido coincide con el monto de operaci√≥n
    if abs(margen_requerido - monto_operacion) < 0.01:
        print(f"   ‚úÖ Margen requerido coincide con monto operaci√≥n: ${margen_requerido:.2f} ‚âà ${monto_operacion:.2f}")
    else:
        print(f"   ‚ùå Error en c√°lculo: ${margen_requerido:.2f} ‚â† ${monto_operacion:.2f}")
    
    # Validar que no excede el balance
    if margen_requerido <= balance:
        print(f"   ‚úÖ Margen requerido no excede balance: ${margen_requerido:.2f} ‚â§ ${balance:.2f}")
    else:
        print(f"   ‚ùå Margen requerido excede balance: ${margen_requerido:.2f} > ${balance:.2f}")
    
    # Validar porcentaje del balance usado
    porcentaje_usado = (margen_requerido / balance) * 100
    print(f"   üìä Porcentaje del balance usado: {porcentaje_usado:.1f}%")
    
    if porcentaje_usado <= max_position_size * 100:
        print(f"   ‚úÖ Porcentaje usado respeta l√≠mite: {porcentaje_usado:.1f}% ‚â§ {max_position_size*100:.1f}%")
    else:
        print(f"   ‚ùå Porcentaje usado excede l√≠mite: {porcentaje_usado:.1f}% > {max_position_size*100:.1f}%")
    
    print()
    return True

def analyze_multi_position_risk():
    """üîÑ Analizar riesgo con m√∫ltiples posiciones"""
    print("üîÑ AN√ÅLISIS DE RIESGO CON M√öLTIPLES POSICIONES")
    print("=" * 80)
    
    scalping_config = TradingProfiles.PROFILES["SCALPING"]
    
    max_positions = scalping_config['max_positions']
    max_position_size = scalping_config['max_position_size']
    max_total_exposure = scalping_config['max_total_exposure']
    max_risk_per_trade = scalping_config['max_risk_per_trade']
    
    print("üìä CONFIGURACI√ìN MULTI-POSICI√ìN:")
    print(f"   ‚Ä¢ M√°ximo posiciones: {max_positions}")
    print(f"   ‚Ä¢ Tama√±o por posici√≥n: {max_position_size*100:.1f}%")
    print(f"   ‚Ä¢ Exposici√≥n total m√°xima: {max_total_exposure*100:.1f}%")
    print(f"   ‚Ä¢ Riesgo por trade: {max_risk_per_trade}%")
    print()
    
    # Escenarios de m√∫ltiples posiciones
    scenarios = [
        {"positions": 1, "description": "Una posici√≥n"},
        {"positions": 2, "description": "Dos posiciones"},
        {"positions": 3, "description": "Tres posiciones"},
        {"positions": max_positions, "description": f"M√°ximo ({max_positions} posiciones)"}
    ]
    
    print("üé≠ ESCENARIOS DE M√öLTIPLES POSICIONES:")
    print("-" * 60)
    
    for scenario in scenarios:
        num_positions = scenario['positions']
        description = scenario['description']
        
        # Calcular exposici√≥n total
        total_exposure = num_positions * max_position_size
        total_risk = num_positions * (max_risk_per_trade / 100)
        
        # Determinar estado
        if total_exposure <= max_total_exposure:
            exposure_status = "‚úÖ DENTRO DEL L√çMITE"
        else:
            exposure_status = "‚ùå EXCEDE L√çMITE"
        
        if total_risk <= 0.05:  # 5% riesgo total m√°ximo recomendado
            risk_status = "‚úÖ RIESGO BAJO"
        elif total_risk <= 0.10:  # 10%
            risk_status = "‚ö†Ô∏è RIESGO MODERADO"
        else:
            risk_status = "‚ùå RIESGO ALTO"
        
        print(f"   {description}:")
        print(f"      ‚Ä¢ Exposici√≥n total: {total_exposure*100:.1f}% - {exposure_status}")
        print(f"      ‚Ä¢ Riesgo total: {total_risk*100:.1f}% - {risk_status}")
        print()
    
    # Recomendaciones
    max_safe_exposure = max_positions * max_position_size
    print("üí° AN√ÅLISIS DE SEGURIDAD:")
    
    if max_safe_exposure <= max_total_exposure:
        print(f"   ‚úÖ Configuraci√≥n segura: {max_safe_exposure*100:.1f}% ‚â§ {max_total_exposure*100:.1f}%")
        print("   ‚úÖ Todas las posiciones pueden abrirse simult√°neamente")
    else:
        print(f"   ‚ö†Ô∏è Posible sobreexposici√≥n: {max_safe_exposure*100:.1f}% > {max_total_exposure*100:.1f}%")
        print("   ‚ö†Ô∏è No todas las posiciones pueden abrirse simult√°neamente")
    
    print()
    return True

def main():
    """üöÄ Funci√≥n principal de an√°lisis"""
    print("üõ°Ô∏è AN√ÅLISIS COMPLETO DE GESTI√ìN DE RIESGO")
    print("=" * 100)
    print()
    
    try:
        # Ejecutar an√°lisis
        analyze_scalping_risk_configuration()
        print()
        
        simulate_position_sizing_scenarios()
        print()
        
        analyze_risk_levels_distribution()
        print()
        
        validate_risk_calculations()
        print()
        
        analyze_multi_position_risk()
        
        print("üéâ RESUMEN DEL AN√ÅLISIS:")
        print("=" * 80)
        print("‚úÖ Configuraci√≥n de riesgo analizada completamente")
        print("‚úÖ C√°lculos de tama√±o de posici√≥n validados")
        print("‚úÖ Niveles de riesgo verificados")
        print("‚úÖ Escenarios multi-posici√≥n evaluados")
        print("‚úÖ Validaciones matem√°ticas completadas")
        print()
        print("üéØ CONCLUSI√ìN: La gesti√≥n de riesgo est√° correctamente implementada")
        print("   con par√°metros conservadores apropiados para scalping.")
        
    except Exception as e:
        logger.error(f"‚ùå Error en el an√°lisis: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)